// Generated by Haxe 3.4.7
#ifndef INCLUDED_djFlixel_gfx_GfxTool
#define INCLUDED_djFlixel_gfx_GfxTool

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(djFlixel,gfx,GfxTool)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,graphics,FlxGraphic)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)

namespace djFlixel{
namespace gfx{


class HXCPP_CLASS_ATTRIBUTES GfxTool_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GfxTool_obj OBJ_;
		GfxTool_obj();

	public:
		enum { _hx_ClassId = 0x0b34621e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="djFlixel.gfx.GfxTool")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"djFlixel.gfx.GfxTool"); }

		hx::ObjectPtr< GfxTool_obj > __new() {
			hx::ObjectPtr< GfxTool_obj > __this = new GfxTool_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< GfxTool_obj > __alloc(hx::Ctx *_hx_ctx) {
			GfxTool_obj *__this = (GfxTool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GfxTool_obj), false, "djFlixel.gfx.GfxTool"));
			*(void **)__this = GfxTool_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GfxTool_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GfxTool","\x51","\xe1","\xca","\xa0"); }

		static void __boot();
		static  ::openfl::display::BitmapData drawTilesToBitmap( ::Dynamic source,int tw,int th,::Array< ::Dynamic> mapdata);
		static ::Dynamic drawTilesToBitmap_dyn();

		static  ::openfl::display::BitmapData applyShadow( ::openfl::display::BitmapData im,hx::Null< int >  color,hx::Null< int >  offx,hx::Null< int >  offy);
		static ::Dynamic applyShadow_dyn();

		static  ::openfl::display::BitmapData getBitmapPortion( ::Dynamic source,int x,int y,int width,int height);
		static ::Dynamic getBitmapPortion_dyn();

		static  ::openfl::display::BitmapData resolveBitmapData( ::Dynamic Graphic);
		static ::Dynamic resolveBitmapData_dyn();

		static void drawBitmapOn( ::openfl::display::BitmapData src, ::openfl::display::BitmapData dest,hx::Null< int >  x,hx::Null< int >  y);
		static ::Dynamic drawBitmapOn_dyn();

		static  ::openfl::display::BitmapData stitchBitmaps(::Array< ::Dynamic> ar);
		static ::Dynamic stitchBitmaps_dyn();

		static  ::flixel::FlxSprite getSpriteFrame(::String img,int frame,int width,int height);
		static ::Dynamic getSpriteFrame_dyn();

		static  ::openfl::display::BitmapData replaceColor( ::openfl::display::BitmapData source,int color0,int color1,hx::Null< bool >  cloneImage);
		static ::Dynamic replaceColor_dyn();

		static  ::flixel::graphics::FlxGraphic getGraphicColorReplace( ::openfl::display::BitmapData b,::Array< int > source,::Array< int > dest);
		static ::Dynamic getGraphicColorReplace_dyn();

		static int extractRed(int c);
		static ::Dynamic extractRed_dyn();

		static int extractGreen(int c);
		static ::Dynamic extractGreen_dyn();

		static int extractBlue(int c);
		static ::Dynamic extractBlue_dyn();

		static int snapToLowerBitRepr(int a,hx::Null< int >  div);
		static ::Dynamic snapToLowerBitRepr_dyn();

		static  ::openfl::display::BitmapData rainbowStripes(::Array< int > colors,hx::Null< int >  width,hx::Null< int >  height);
		static ::Dynamic rainbowStripes_dyn();

		static ::String PREFIX_PALETTE;
		static int stringColor(::String s);
		static ::Dynamic stringColor_dyn();

		static int palCol(::String str);
		static ::Dynamic palCol_dyn();

};

} // end namespace djFlixel
} // end namespace gfx

#endif /* INCLUDED_djFlixel_gfx_GfxTool */ 
