// Generated by Haxe 3.4.7
#ifndef INCLUDED_djFlixel_tool_DelayCall
#define INCLUDED_djFlixel_tool_DelayCall

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
HX_DECLARE_CLASS2(djFlixel,tool,DelayCall)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace djFlixel{
namespace tool{


class HXCPP_CLASS_ATTRIBUTES DelayCall_obj : public  ::flixel::FlxBasic_obj
{
	public:
		typedef  ::flixel::FlxBasic_obj super;
		typedef DelayCall_obj OBJ_;
		DelayCall_obj();

	public:
		enum { _hx_ClassId = 0x104f1f07 };

		void __construct( ::Dynamic Callback,hx::Null< Float >  __o_time, ::flixel::FlxState state);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="djFlixel.tool.DelayCall")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"djFlixel.tool.DelayCall"); }
		static hx::ObjectPtr< DelayCall_obj > __new( ::Dynamic Callback,hx::Null< Float >  __o_time, ::flixel::FlxState state);
		static hx::ObjectPtr< DelayCall_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic Callback,hx::Null< Float >  __o_time, ::flixel::FlxState state);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DelayCall_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("DelayCall","\xa1","\x79","\xc2","\xc4"); }

		Float countDown;
		 ::Dynamic callback;
		Dynamic callback_dyn() { return callback;}
		void update(Float elapsed);

		void destroy();

};

} // end namespace djFlixel
} // end namespace tool

#endif /* INCLUDED_djFlixel_tool_DelayCall */ 
