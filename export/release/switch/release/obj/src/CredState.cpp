// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_CredState
#include <CredState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_djFlixel_fx_BoxFader
#include <djFlixel/fx/BoxFader.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3ae4f6cada1a0354_10_new,"CredState","new",0x35d3a0b5,"CredState.new","CredState.hx",10,0x14e7ac5b)
HX_LOCAL_STACK_FRAME(_hx_pos_3ae4f6cada1a0354_19_create,"CredState","create",0x3480b9c7,"CredState.create","CredState.hx",19,0x14e7ac5b)
HX_LOCAL_STACK_FRAME(_hx_pos_3ae4f6cada1a0354_47_update,"CredState","update",0x3f76d8d4,"CredState.update","CredState.hx",47,0x14e7ac5b)
HX_LOCAL_STACK_FRAME(_hx_pos_3ae4f6cada1a0354_53_update,"CredState","update",0x3f76d8d4,"CredState.update","CredState.hx",53,0x14e7ac5b)

void CredState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_3ae4f6cada1a0354_10_new)
HXLINE(  81)		this->credsArray = ::cpp::VirtualArray_obj::__new(7)->init(0,::cpp::VirtualArray_obj::__new(9)->init(0,HX_("BLUE DOOR THE GAME",0d,e3,a7,73))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00))->init(3,HX_("Created and Designed by:",61,35,f0,43))->init(4,HX_("Brandon Driesse (@BrandyBuizel)",b5,16,e6,59))->init(5,HX_("Joe Varca",e5,a8,f5,be))->init(6,HX_("",00,00,00,00))->init(7,HX_("",00,00,00,00))->init(8,HX_("Made with HaxeFlixel",f1,50,60,a8)))->init(1,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("Inspired by 'Tapper' and",10,3a,35,ef))->init(1,HX_("'SpongeBob SquarePants: Lights, Camera, Pants!'",df,65,6a,4e))->init(2,HX_("",00,00,00,00))->init(3,HX_("Github Sourcecode: https://github.com/BrandyBuizel/BlueDoor",1b,92,be,ce)))->init(2,::cpp::VirtualArray_obj::__new(5)->init(0,HX_("FEATURING",53,65,03,65))->init(1,HX_("",00,00,00,00))->init(2,HX_("Ken",74,41,39,00))->init(3,HX_("Dylan",c4,8b,8c,77))->init(4,HX_("Dustin",f7,52,82,da)))->init(3,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("SPECIAL THANKS",70,d2,5e,25))->init(1,HX_("Isaac & Logan",70,65,c6,da))->init(2,HX_("",00,00,00,00))->init(3,HX_("For helping us sneak this game onto their custom cabinet",11,6a,ae,42)))->init(4,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("SPECIAL THANKS",70,d2,5e,25))->init(1,HX_("Cameron Taylor (@ninja_muffin99)",37,ce,d3,b4))->init(2,HX_("",00,00,00,00))->init(3,HX_("For additional coding assitance",e7,a9,12,db)))->init(5,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Press Z to go back",5d,98,39,81)))->init(6,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Or listen to the Macho Man Rap on loop...",50,6e,48,47)));
HXLINE(  16)		this->curCredPlacement = (int)0;
HXLINE(  15)		this->credTimer = ((Float)5);
HXLINE(  10)		super::__construct(MaxSize);
            	}

Dynamic CredState_obj::__CreateEmpty() { return new CredState_obj; }

void *CredState_obj::_hx_vtable = 0;

Dynamic CredState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CredState_obj > _hx_result = new CredState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CredState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x28862243 || inClassId==(int)0x3634c52c;
	}
}

void CredState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_3ae4f6cada1a0354_19_create)
HXLINE(  20)		this->creds =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,(::flixel::FlxG_obj::width - (int)24),HX_("",00,00,00,00),(int)24,null());
HXLINE(  21)		this->creds->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  22)		this->add(this->creds);
HXLINE(  24)		{
HXLINE(  24)			int _g1 = (int)0;
HXDLIN(  24)			int _g = ( (int)(this->credsArray->__get(this->curCredPlacement)->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN(  24)			while((_g1 < _g)){
HXLINE(  24)				_g1 = (_g1 + (int)1);
HXDLIN(  24)				int i = (_g1 - (int)1);
HXLINE(  25)				{
HXLINE(  25)					 ::flixel::text::FlxText _g2 = this->creds;
HXDLIN(  25)					::String _g21 = _g2->text;
HXDLIN(  25)					_g2->set_text((_g21 + (( (::String)(this->credsArray->__get(this->curCredPlacement)->__GetItem(i)) ) + HX_("\n",0a,00,00,00))));
            				}
            			}
            		}
HXLINE(  28)		this->creds->screenCenter(null());
HXLINE(  30)		this->boxFade =  ::djFlixel::fx::BoxFader_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  31)		this->boxFade->setColor((int)-16777216,null(),null());
HXLINE(  32)		this->boxFade->fadeOff(null(),null());
HXLINE(  33)		this->add(this->boxFade);
HXLINE(  43)		this->super::create();
            	}


void CredState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_3ae4f6cada1a0354_47_update)
HXLINE(  46)		 ::CredState _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  48)		 ::CredState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  48)		_hx_tmp->credTimer = (_hx_tmp->credTimer - ::flixel::FlxG_obj::elapsed);
HXLINE(  50)		if ((this->credTimer < (int)0)) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::CredState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_3ae4f6cada1a0354_53_update)
HXLINE(  54)				_gthis->creds->set_text(HX_("",00,00,00,00));
HXLINE(  55)				 ::CredState _gthis1 = _gthis;
HXDLIN(  55)				_gthis1->curCredPlacement = (_gthis1->curCredPlacement + (int)1);
HXLINE(  57)				if ((_gthis->curCredPlacement >= _gthis->credsArray->get_length())) {
HXLINE(  58)					_gthis->curCredPlacement = (int)0;
            				}
HXLINE(  60)				{
HXLINE(  60)					int _g1 = (int)0;
HXDLIN(  60)					int _g = ( (int)(_gthis->credsArray->__get(_gthis->curCredPlacement)->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN(  60)					while((_g1 < _g)){
HXLINE(  60)						_g1 = (_g1 + (int)1);
HXDLIN(  60)						int i = (_g1 - (int)1);
HXLINE(  61)						{
HXLINE(  61)							 ::flixel::text::FlxText _g2 = _gthis->creds;
HXDLIN(  61)							::String _g21 = _g2->text;
HXDLIN(  61)							_g2->set_text((_g21 + (( (::String)(_gthis->credsArray->__get(_gthis->curCredPlacement)->__GetItem(i)) ) + HX_("\n",0a,00,00,00))));
            						}
            					}
            				}
HXLINE(  64)				_gthis->creds->screenCenter(null());
HXLINE(  65)				_gthis->boxFade->fadeOff(null(),null());
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  51)			this->credTimer = (int)6;
HXLINE(  53)			this->boxFade->fadeColor((int)-16777216,null(), ::Dynamic(new _hx_Closure_0(_gthis)));
            		}
HXLINE(  69)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN(  69)		int KeyArray;
HXDLIN(  69)		::String s = HX_("Z",5a,00,00,00);
HXDLIN(  69)		s = s.toUpperCase();
HXDLIN(  69)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE(  69)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE(  69)			KeyArray = (int)-1;
            		}
HXDLIN(  69)		int KeyArray1;
HXDLIN(  69)		::String s1 = HX_("ENTER",f8,a4,74,ee);
HXDLIN(  69)		s1 = s1.toUpperCase();
HXDLIN(  69)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE(  69)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXLINE(  69)			KeyArray1 = (int)-1;
            		}
HXDLIN(  69)		::String s2 = HX_("SPACE",a6,c4,54,ff);
HXDLIN(  69)		s2 = s2.toUpperCase();
HXDLIN(  69)		int KeyArray2;
HXDLIN(  69)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE(  69)			KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            		}
            		else {
HXLINE(  69)			KeyArray2 = (int)-1;
            		}
HXDLIN(  69)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(3)->init(0,KeyArray)->init(1,KeyArray1)->init(2,KeyArray2),(int)2)) {
HXLINE(  70)			{
HXLINE(  70)				 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(  70)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE(  72)			{
HXLINE(  72)				 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN(  72)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  72)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE(  75)		 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE(  77)		this->super::update(elapsed);
            	}



hx::ObjectPtr< CredState_obj > CredState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< CredState_obj > __this = new CredState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< CredState_obj > CredState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	CredState_obj *__this = (CredState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CredState_obj), true, "CredState"));
	*(void **)__this = CredState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

CredState_obj::CredState_obj()
{
}

void CredState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CredState);
	HX_MARK_MEMBER_NAME(creds,"creds");
	HX_MARK_MEMBER_NAME(boxFade,"boxFade");
	HX_MARK_MEMBER_NAME(credTimer,"credTimer");
	HX_MARK_MEMBER_NAME(curCredPlacement,"curCredPlacement");
	HX_MARK_MEMBER_NAME(credsArray,"credsArray");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CredState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(creds,"creds");
	HX_VISIT_MEMBER_NAME(boxFade,"boxFade");
	HX_VISIT_MEMBER_NAME(credTimer,"credTimer");
	HX_VISIT_MEMBER_NAME(curCredPlacement,"curCredPlacement");
	HX_VISIT_MEMBER_NAME(credsArray,"credsArray");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CredState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"creds") ) { return hx::Val( creds ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"boxFade") ) { return hx::Val( boxFade ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credTimer") ) { return hx::Val( credTimer ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"credsArray") ) { return hx::Val( credsArray ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curCredPlacement") ) { return hx::Val( curCredPlacement ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CredState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"creds") ) { creds=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"boxFade") ) { boxFade=inValue.Cast<  ::djFlixel::fx::BoxFader >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credTimer") ) { credTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"credsArray") ) { credsArray=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curCredPlacement") ) { curCredPlacement=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CredState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("creds","\xe5","\xbb","\x52","\x4c"));
	outFields->push(HX_HCSTRING("boxFade","\x27","\x01","\x79","\x93"));
	outFields->push(HX_HCSTRING("credTimer","\x17","\x8c","\xdd","\x12"));
	outFields->push(HX_HCSTRING("curCredPlacement","\x97","\x61","\xc7","\x20"));
	outFields->push(HX_HCSTRING("credsArray","\x74","\xe3","\x5d","\xcf"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CredState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(CredState_obj,creds),HX_HCSTRING("creds","\xe5","\xbb","\x52","\x4c")},
	{hx::fsObject /*::djFlixel::fx::BoxFader*/ ,(int)offsetof(CredState_obj,boxFade),HX_HCSTRING("boxFade","\x27","\x01","\x79","\x93")},
	{hx::fsFloat,(int)offsetof(CredState_obj,credTimer),HX_HCSTRING("credTimer","\x17","\x8c","\xdd","\x12")},
	{hx::fsInt,(int)offsetof(CredState_obj,curCredPlacement),HX_HCSTRING("curCredPlacement","\x97","\x61","\xc7","\x20")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(CredState_obj,credsArray),HX_HCSTRING("credsArray","\x74","\xe3","\x5d","\xcf")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CredState_obj_sStaticStorageInfo = 0;
#endif

static ::String CredState_obj_sMemberFields[] = {
	HX_HCSTRING("creds","\xe5","\xbb","\x52","\x4c"),
	HX_HCSTRING("boxFade","\x27","\x01","\x79","\x93"),
	HX_HCSTRING("credTimer","\x17","\x8c","\xdd","\x12"),
	HX_HCSTRING("curCredPlacement","\x97","\x61","\xc7","\x20"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("credsArray","\x74","\xe3","\x5d","\xcf"),
	::String(null()) };

static void CredState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CredState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CredState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CredState_obj::__mClass,"__mClass");
};

#endif

hx::Class CredState_obj::__mClass;

void CredState_obj::__register()
{
	hx::Object *dummy = new CredState_obj;
	CredState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("CredState","\x43","\x22","\x86","\x28");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CredState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CredState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CredState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CredState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CredState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CredState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

