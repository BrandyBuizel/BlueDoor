// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_system_replay_CodeValuePair
#include <flixel/system/replay/CodeValuePair.h>
#endif
#ifndef INCLUDED_flixel_system_replay_FrameRecord
#include <flixel/system/replay/FrameRecord.h>
#endif
#ifndef INCLUDED_flixel_system_replay_MouseRecord
#include <flixel/system/replay/MouseRecord.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2d7a8c52486d80d6_27_new,"flixel.system.replay.FrameRecord","new",0xf4a8b736,"flixel.system.replay.FrameRecord.new","flixel/system/replay/FrameRecord.hx",27,0xc059da9b)
HX_LOCAL_STACK_FRAME(_hx_pos_2d7a8c52486d80d6_41_create,"flixel.system.replay.FrameRecord","create",0x88c1e9e6,"flixel.system.replay.FrameRecord.create","flixel/system/replay/FrameRecord.hx",41,0xc059da9b)
HX_LOCAL_STACK_FRAME(_hx_pos_2d7a8c52486d80d6_53_destroy,"flixel.system.replay.FrameRecord","destroy",0x340636d0,"flixel.system.replay.FrameRecord.destroy","flixel/system/replay/FrameRecord.hx",53,0xc059da9b)
HX_LOCAL_STACK_FRAME(_hx_pos_2d7a8c52486d80d6_63_save,"flixel.system.replay.FrameRecord","save",0x22429fa7,"flixel.system.replay.FrameRecord.save","flixel/system/replay/FrameRecord.hx",63,0xc059da9b)
HX_LOCAL_STACK_FRAME(_hx_pos_2d7a8c52486d80d6_96_load,"flixel.system.replay.FrameRecord","load",0x1dacae90,"flixel.system.replay.FrameRecord.load","flixel/system/replay/FrameRecord.hx",96,0xc059da9b)
namespace flixel{
namespace _hx_system{
namespace replay{

void FrameRecord_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2d7a8c52486d80d6_27_new)
HXLINE(  28)		this->frame = (int)0;
HXLINE(  29)		this->keys = null();
HXLINE(  30)		this->mouse = null();
            	}

Dynamic FrameRecord_obj::__CreateEmpty() { return new FrameRecord_obj; }

void *FrameRecord_obj::_hx_vtable = 0;

Dynamic FrameRecord_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FrameRecord_obj > _hx_result = new FrameRecord_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FrameRecord_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3262eb8c;
}

 ::flixel::_hx_system::replay::FrameRecord FrameRecord_obj::create(Float Frame,::Array< ::Dynamic> Keys, ::flixel::_hx_system::replay::MouseRecord Mouse){
            	HX_STACKFRAME(&_hx_pos_2d7a8c52486d80d6_41_create)
HXLINE(  42)		this->frame = ::Math_obj::floor(Frame);
HXLINE(  43)		this->keys = Keys;
HXLINE(  44)		this->mouse = Mouse;
HXLINE(  46)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FrameRecord_obj,create,return )

void FrameRecord_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_2d7a8c52486d80d6_53_destroy)
HXLINE(  54)		this->keys = null();
HXLINE(  55)		this->mouse = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FrameRecord_obj,destroy,(void))

::String FrameRecord_obj::save(){
            	HX_STACKFRAME(&_hx_pos_2d7a8c52486d80d6_63_save)
HXLINE(  64)		::String output = (this->frame + HX_("k",6b,00,00,00));
HXLINE(  66)		if (hx::IsNotNull( this->keys )) {
HXLINE(  68)			 ::flixel::_hx_system::replay::CodeValuePair object;
HXLINE(  69)			int i = (int)0;
HXLINE(  70)			int l = this->keys->length;
HXLINE(  71)			while((i < l)){
HXLINE(  73)				if ((i > (int)0)) {
HXLINE(  75)					output = (output + HX_(",",2c,00,00,00));
            				}
HXLINE(  77)				::Array< ::Dynamic> object1 = this->keys;
HXDLIN(  77)				i = (i + (int)1);
HXDLIN(  77)				object = object1->__get((i - (int)1)).StaticCast<  ::flixel::_hx_system::replay::CodeValuePair >();
HXLINE(  78)				output = (output + ((object->code + HX_(":",3a,00,00,00)) + object->value));
            			}
            		}
HXLINE(  82)		output = (output + HX_("m",6d,00,00,00));
HXLINE(  83)		if (hx::IsNotNull( this->mouse )) {
HXLINE(  85)			output = (output + ((((((this->mouse->x + HX_(",",2c,00,00,00)) + this->mouse->y) + HX_(",",2c,00,00,00)) + this->mouse->button) + HX_(",",2c,00,00,00)) + this->mouse->wheel));
            		}
HXLINE(  88)		return output;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FrameRecord_obj,save,return )

 ::flixel::_hx_system::replay::FrameRecord FrameRecord_obj::load(::String Data){
            	HX_GC_STACKFRAME(&_hx_pos_2d7a8c52486d80d6_96_load)
HXLINE(  97)		int i;
HXLINE(  98)		int l;
HXLINE( 101)		::Array< ::String > array = Data.split(HX_("k",6b,00,00,00));
HXLINE( 102)		this->frame = ::Std_obj::parseInt(array->__get((int)0));
HXLINE( 105)		array = array->__get((int)1).split(HX_("m",6d,00,00,00));
HXLINE( 106)		::String keyData = array->__get((int)0);
HXLINE( 107)		::String mouseData = array->__get((int)1);
HXLINE( 110)		if ((keyData.length > (int)0)) {
HXLINE( 113)			array = keyData.split(HX_(",",2c,00,00,00));
HXLINE( 116)			::Array< ::String > keyPair;
HXLINE( 117)			i = (int)0;
HXLINE( 118)			l = array->length;
HXLINE( 119)			while((i < l)){
HXLINE( 121)				i = (i + (int)1);
HXDLIN( 121)				keyPair = array->__get((i - (int)1)).split(HX_(":",3a,00,00,00));
HXLINE( 122)				if ((keyPair->length == (int)2)) {
HXLINE( 124)					if (hx::IsNull( this->keys )) {
HXLINE( 126)						this->keys = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE( 128)					::Array< ::Dynamic> _hx_tmp = this->keys;
HXDLIN( 128)					 ::Dynamic _hx_tmp1 = ::Std_obj::parseInt(keyPair->__get((int)0));
HXDLIN( 128)					_hx_tmp->push( ::flixel::_hx_system::replay::CodeValuePair_obj::__alloc( HX_CTX ,_hx_tmp1,::Std_obj::parseInt(keyPair->__get((int)1))));
            				}
            			}
            		}
HXLINE( 134)		if ((mouseData.length > (int)0)) {
HXLINE( 136)			array = mouseData.split(HX_(",",2c,00,00,00));
HXLINE( 137)			if ((array->length >= (int)4)) {
HXLINE( 139)				 ::Dynamic _hx_tmp2 = ::Std_obj::parseInt(array->__get((int)0));
HXDLIN( 139)				 ::Dynamic _hx_tmp3 = ::Std_obj::parseInt(array->__get((int)1));
HXDLIN( 139)				 ::Dynamic _hx_tmp4 = ::Std_obj::parseInt(array->__get((int)2));
HXDLIN( 139)				this->mouse =  ::flixel::_hx_system::replay::MouseRecord_obj::__alloc( HX_CTX ,_hx_tmp2,_hx_tmp3,_hx_tmp4,::Std_obj::parseInt(array->__get((int)3)));
            			}
            		}
HXLINE( 143)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FrameRecord_obj,load,return )


hx::ObjectPtr< FrameRecord_obj > FrameRecord_obj::__new() {
	hx::ObjectPtr< FrameRecord_obj > __this = new FrameRecord_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FrameRecord_obj > FrameRecord_obj::__alloc(hx::Ctx *_hx_ctx) {
	FrameRecord_obj *__this = (FrameRecord_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FrameRecord_obj), true, "flixel.system.replay.FrameRecord"));
	*(void **)__this = FrameRecord_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FrameRecord_obj::FrameRecord_obj()
{
}

void FrameRecord_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FrameRecord);
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(keys,"keys");
	HX_MARK_MEMBER_NAME(mouse,"mouse");
	HX_MARK_END_CLASS();
}

void FrameRecord_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(keys,"keys");
	HX_VISIT_MEMBER_NAME(mouse,"mouse");
}

hx::Val FrameRecord_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return hx::Val( keys ); }
		if (HX_FIELD_EQ(inName,"save") ) { return hx::Val( save_dyn() ); }
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame ); }
		if (HX_FIELD_EQ(inName,"mouse") ) { return hx::Val( mouse ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FrameRecord_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouse") ) { mouse=inValue.Cast<  ::flixel::_hx_system::replay::MouseRecord >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FrameRecord_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"));
	outFields->push(HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FrameRecord_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FrameRecord_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FrameRecord_obj,keys),HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47")},
	{hx::fsObject /*::flixel::_hx_system::replay::MouseRecord*/ ,(int)offsetof(FrameRecord_obj,mouse),HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FrameRecord_obj_sStaticStorageInfo = 0;
#endif

static ::String FrameRecord_obj_sMemberFields[] = {
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("save","\x3d","\x8b","\x4d","\x4c"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	::String(null()) };

static void FrameRecord_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FrameRecord_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FrameRecord_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FrameRecord_obj::__mClass,"__mClass");
};

#endif

hx::Class FrameRecord_obj::__mClass;

void FrameRecord_obj::__register()
{
	hx::Object *dummy = new FrameRecord_obj;
	FrameRecord_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.replay.FrameRecord","\x44","\xa4","\x0b","\x96");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FrameRecord_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FrameRecord_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FrameRecord_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FrameRecord_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FrameRecord_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FrameRecord_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace replay
