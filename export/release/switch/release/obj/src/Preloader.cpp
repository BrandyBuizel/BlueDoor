// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_LogoImage
#include <LogoImage.h>
#endif
#ifndef INCLUDED_Preloader
#include <Preloader.h>
#endif
#ifndef INCLUDED_flixel_system_FlxBasePreloader
#include <flixel/system/FlxBasePreloader.h>
#endif
#ifndef INCLUDED_flixel_system__FlxBasePreloader_DefaultPreloader
#include <flixel/system/_FlxBasePreloader/DefaultPreloader.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_312e3f7dfa8ca2c7_23_new,"Preloader","new",0x90324848,"Preloader.new","Preloader.hx",23,0xc73f5828)
HX_LOCAL_STACK_FRAME(_hx_pos_312e3f7dfa8ca2c7_32_create,"Preloader","create",0xecaed014,"Preloader.create","Preloader.hx",32,0xc73f5828)
HX_LOCAL_STACK_FRAME(_hx_pos_312e3f7dfa8ca2c7_60_destroy,"Preloader","destroy",0x3f62b8e2,"Preloader.destroy","Preloader.hx",60,0xc73f5828)
HX_LOCAL_STACK_FRAME(_hx_pos_312e3f7dfa8ca2c7_73_update,"Preloader","update",0xf7a4ef21,"Preloader.update","Preloader.hx",73,0xc73f5828)

void Preloader_obj::__construct(hx::Null< Float >  __o_MinDisplayTime,::Array< ::String > AllowedURLs){
Float MinDisplayTime = __o_MinDisplayTime.Default(4);
            	HX_STACKFRAME(&_hx_pos_312e3f7dfa8ca2c7_23_new)
HXDLIN(  23)		super::__construct(MinDisplayTime,AllowedURLs);
            	}

Dynamic Preloader_obj::__CreateEmpty() { return new Preloader_obj; }

void *Preloader_obj::_hx_vtable = 0;

Dynamic Preloader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Preloader_obj > _hx_result = new Preloader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Preloader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x6eebd534) {
			if (inClassId<=(int)0x3f2b00af) {
				return inClassId==(int)0x244ec456 || inClassId==(int)0x3f2b00af;
			} else {
				return inClassId==(int)0x6eebd534;
			}
		} else {
			return inClassId==(int)0x7079d462;
		}
	}
}

void Preloader_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_312e3f7dfa8ca2c7_32_create)
HXLINE(  33)		this->_width = ::openfl::Lib_obj::get_current()->stage->stageWidth;
HXLINE(  34)		this->_height = ::openfl::Lib_obj::get_current()->stage->stageHeight;
HXLINE(  36)		Float ratio = ((Float)this->_width / (Float)(int)800);
HXLINE(  38)		this->logo =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  39)		this->logo->set_scaleY((int)1);
HXLINE(  40)		 ::openfl::display::Sprite _hx_tmp = this->logo;
HXDLIN(  40)		_hx_tmp->addChild( ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::LogoImage_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),null(),null()));
HXLINE(  41)		this->addChild(this->logo);
HXLINE(  45)		int milkFrame = (int)0;
HXLINE(  47)		this->_buffer =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  49)		this->addChild(this->_buffer);
HXLINE(  51)		this->_bmpBar =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)1,(int)14,false,(int)6253311),null(),null());
HXLINE(  52)		this->_bmpBar->set_x((int)4);
HXLINE(  53)		 ::openfl::display::Bitmap _hx_tmp1 = this->_bmpBar;
HXDLIN(  53)		_hx_tmp1->set_y((this->_height - (int)17));
HXLINE(  56)		this->super::create();
            	}


void Preloader_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_312e3f7dfa8ca2c7_60_destroy)
HXLINE(  61)		if (hx::IsNotNull( this->_buffer )) {
HXLINE(  63)			this->removeChild(this->_buffer);
            		}
HXLINE(  65)		this->_buffer = null();
HXLINE(  66)		this->_bmpBar = null();
HXLINE(  67)		this->logo = null();
HXLINE(  69)		this->super::destroy();
            	}


void Preloader_obj::update(Float Percent){
            	HX_STACKFRAME(&_hx_pos_312e3f7dfa8ca2c7_73_update)
HXLINE(  95)		this->super::update(Percent);
HXLINE(  98)		 ::openfl::display::Bitmap _hx_tmp = this->_bmpBar;
HXDLIN(  98)		_hx_tmp->set_scaleX((Percent * (this->_width - (int)8)));
            	}



hx::ObjectPtr< Preloader_obj > Preloader_obj::__new(hx::Null< Float >  __o_MinDisplayTime,::Array< ::String > AllowedURLs) {
	hx::ObjectPtr< Preloader_obj > __this = new Preloader_obj();
	__this->__construct(__o_MinDisplayTime,AllowedURLs);
	return __this;
}

hx::ObjectPtr< Preloader_obj > Preloader_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_MinDisplayTime,::Array< ::String > AllowedURLs) {
	Preloader_obj *__this = (Preloader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Preloader_obj), true, "Preloader"));
	*(void **)__this = Preloader_obj::_hx_vtable;
	__this->__construct(__o_MinDisplayTime,AllowedURLs);
	return __this;
}

Preloader_obj::Preloader_obj()
{
}

void Preloader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Preloader);
	HX_MARK_MEMBER_NAME(logo,"logo");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(_buffer,"_buffer");
	HX_MARK_MEMBER_NAME(_bmpBar,"_bmpBar");
	 ::flixel::_hx_system::FlxBasePreloader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Preloader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(logo,"logo");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(_buffer,"_buffer");
	HX_VISIT_MEMBER_NAME(_bmpBar,"_bmpBar");
	 ::flixel::_hx_system::FlxBasePreloader_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Preloader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"logo") ) { return hx::Val( logo ); }
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_buffer") ) { return hx::Val( _buffer ); }
		if (HX_FIELD_EQ(inName,"_bmpBar") ) { return hx::Val( _bmpBar ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Preloader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"logo") ) { logo=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_buffer") ) { _buffer=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bmpBar") ) { _bmpBar=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Preloader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("logo","\x6b","\x9f","\xb7","\x47"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("_buffer","\x9f","\xce","\x0b","\x3f"));
	outFields->push(HX_HCSTRING("_bmpBar","\x2d","\xf8","\x57","\xaa"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Preloader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Preloader_obj,logo),HX_HCSTRING("logo","\x6b","\x9f","\xb7","\x47")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Preloader_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Preloader_obj,_buffer),HX_HCSTRING("_buffer","\x9f","\xce","\x0b","\x3f")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(Preloader_obj,_bmpBar),HX_HCSTRING("_bmpBar","\x2d","\xf8","\x57","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Preloader_obj_sStaticStorageInfo = 0;
#endif

static ::String Preloader_obj_sMemberFields[] = {
	HX_HCSTRING("logo","\x6b","\x9f","\xb7","\x47"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("_buffer","\x9f","\xce","\x0b","\x3f"),
	HX_HCSTRING("_bmpBar","\x2d","\xf8","\x57","\xaa"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Preloader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Preloader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Preloader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Preloader_obj::__mClass,"__mClass");
};

#endif

hx::Class Preloader_obj::__mClass;

void Preloader_obj::__register()
{
	hx::Object *dummy = new Preloader_obj;
	Preloader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Preloader","\x56","\xc4","\x4e","\x24");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Preloader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Preloader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Preloader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Preloader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Preloader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Preloader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

