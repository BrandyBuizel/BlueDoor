// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math__FlxVector_FlxVector_Impl_
#include <flixel/math/_FlxVector/FlxVector_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_30_get,"flixel.math._FlxVector.FlxVector_Impl_","get",0x08159f99,"flixel.math._FlxVector.FlxVector_Impl_.get","flixel/math/FlxVector.hx",30,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_43_weak,"flixel.math._FlxVector.FlxVector_Impl_","weak",0x15696015,"flixel.math._FlxVector.FlxVector_Impl_.weak","flixel/math/FlxVector.hx",43,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_100__new,"flixel.math._FlxVector.FlxVector_Impl_","_new",0x059318fe,"flixel.math._FlxVector.FlxVector_Impl_._new","flixel/math/FlxVector.hx",100,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_113_set,"flixel.math._FlxVector.FlxVector_Impl_","set",0x081ebaa5,"flixel.math._FlxVector.FlxVector_Impl_.set","flixel/math/FlxVector.hx",113,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_125_add,"flixel.math._FlxVector.FlxVector_Impl_","add",0x08111124,"flixel.math._FlxVector.FlxVector_Impl_.add","flixel/math/FlxVector.hx",125,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_136_addPoint,"flixel.math._FlxVector.FlxVector_Impl_","addPoint",0xea07708c,"flixel.math._FlxVector.FlxVector_Impl_.addPoint","flixel/math/FlxVector.hx",136,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_148_subtract,"flixel.math._FlxVector.FlxVector_Impl_","subtract",0xa22c0b31,"flixel.math._FlxVector.FlxVector_Impl_.subtract","flixel/math/FlxVector.hx",148,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_159_subtractPoint,"flixel.math._FlxVector.FlxVector_Impl_","subtractPoint",0xdc85e75f,"flixel.math._FlxVector.FlxVector_Impl_.subtractPoint","flixel/math/FlxVector.hx",159,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_170_scale,"flixel.math._FlxVector.FlxVector_Impl_","scale",0x57ddf44d,"flixel.math._FlxVector.FlxVector_Impl_.scale","flixel/math/FlxVector.hx",170,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_181_scaleNew,"flixel.math._FlxVector.FlxVector_Impl_","scaleNew",0xab738213,"flixel.math._FlxVector.FlxVector_Impl_.scaleNew","flixel/math/FlxVector.hx",181,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_192_addNew,"flixel.math._FlxVector.FlxVector_Impl_","addNew",0xed36c59c,"flixel.math._FlxVector.FlxVector_Impl_.addNew","flixel/math/FlxVector.hx",192,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_203_subtractNew,"flixel.math._FlxVector.FlxVector_Impl_","subtractNew",0x674bd1af,"flixel.math._FlxVector.FlxVector_Impl_.subtractNew","flixel/math/FlxVector.hx",203,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_214_copyFrom,"flixel.math._FlxVector.FlxVector_Impl_","copyFrom",0x727ba1dc,"flixel.math._FlxVector.FlxVector_Impl_.copyFrom","flixel/math/FlxVector.hx",214,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_225_copyFromFlash,"flixel.math._FlxVector.FlxVector_Impl_","copyFromFlash",0xb0f9c634,"flixel.math._FlxVector.FlxVector_Impl_.copyFromFlash","flixel/math/FlxVector.hx",225,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_233_floor,"flixel.math._FlxVector.FlxVector_Impl_","floor",0xe1a5f78f,"flixel.math._FlxVector.FlxVector_Impl_.floor","flixel/math/FlxVector.hx",233,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_241_ceil,"flixel.math._FlxVector.FlxVector_Impl_","ceil",0x083122a2,"flixel.math._FlxVector.FlxVector_Impl_.ceil","flixel/math/FlxVector.hx",241,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_249_round,"flixel.math._FlxVector.FlxVector_Impl_","round",0xcc751e11,"flixel.math._FlxVector.FlxVector_Impl_.round","flixel/math/FlxVector.hx",249,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_261_rotate,"flixel.math._FlxVector.FlxVector_Impl_","rotate",0x19522b38,"flixel.math._FlxVector.FlxVector_Impl_.rotate","flixel/math/FlxVector.hx",261,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_271_transform,"flixel.math._FlxVector.FlxVector_Impl_","transform",0x72bbf0af,"flixel.math._FlxVector.FlxVector_Impl_.transform","flixel/math/FlxVector.hx",271,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_281_dotProduct,"flixel.math._FlxVector.FlxVector_Impl_","dotProduct",0x94723f03,"flixel.math._FlxVector.FlxVector_Impl_.dotProduct","flixel/math/FlxVector.hx",281,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_296_dotProductWeak,"flixel.math._FlxVector.FlxVector_Impl_","dotProductWeak",0xe800051b,"flixel.math._FlxVector.FlxVector_Impl_.dotProductWeak","flixel/math/FlxVector.hx",296,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_306_dotProdWithNormalizing,"flixel.math._FlxVector.FlxVector_Impl_","dotProdWithNormalizing",0x1c2bf1a1,"flixel.math._FlxVector.FlxVector_Impl_.dotProdWithNormalizing","flixel/math/FlxVector.hx",306,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_320_isPerpendicular,"flixel.math._FlxVector.FlxVector_Impl_","isPerpendicular",0x5b3427e3,"flixel.math._FlxVector.FlxVector_Impl_.isPerpendicular","flixel/math/FlxVector.hx",320,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_330_crossProductLength,"flixel.math._FlxVector.FlxVector_Impl_","crossProductLength",0x69be8232,"flixel.math._FlxVector.FlxVector_Impl_.crossProductLength","flixel/math/FlxVector.hx",330,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_345_crossProductLengthWeak,"flixel.math._FlxVector.FlxVector_Impl_","crossProductLengthWeak",0x3bff0bca,"flixel.math._FlxVector.FlxVector_Impl_.crossProductLengthWeak","flixel/math/FlxVector.hx",345,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_355_isParallel,"flixel.math._FlxVector.FlxVector_Impl_","isParallel",0x4f27d42e,"flixel.math._FlxVector.FlxVector_Impl_.isParallel","flixel/math/FlxVector.hx",355,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_370_isParallelWeak,"flixel.math._FlxVector.FlxVector_Impl_","isParallelWeak",0x17df0bc6,"flixel.math._FlxVector.FlxVector_Impl_.isParallelWeak","flixel/math/FlxVector.hx",370,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_380_isZero,"flixel.math._FlxVector.FlxVector_Impl_","isZero",0xbc89b90f,"flixel.math._FlxVector.FlxVector_Impl_.isZero","flixel/math/FlxVector.hx",380,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_387_zero,"flixel.math._FlxVector.FlxVector_Impl_","zero",0x176512c5,"flixel.math._FlxVector.FlxVector_Impl_.zero","flixel/math/FlxVector.hx",387,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_396_normalize,"flixel.math._FlxVector.FlxVector_Impl_","normalize",0xd8c9fad0,"flixel.math._FlxVector.FlxVector_Impl_.normalize","flixel/math/FlxVector.hx",396,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_409_isNormalized,"flixel.math._FlxVector.FlxVector_Impl_","isNormalized",0xe04af55e,"flixel.math._FlxVector.FlxVector_Impl_.isNormalized","flixel/math/FlxVector.hx",409,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_419_rotateByRadians,"flixel.math._FlxVector.FlxVector_Impl_","rotateByRadians",0x1e311f03,"flixel.math._FlxVector.FlxVector_Impl_.rotateByRadians","flixel/math/FlxVector.hx",419,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_438_rotateByDegrees,"flixel.math._FlxVector.FlxVector_Impl_","rotateByDegrees",0x319bbc38,"flixel.math._FlxVector.FlxVector_Impl_.rotateByDegrees","flixel/math/FlxVector.hx",438,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_449_rotateWithTrig,"flixel.math._FlxVector.FlxVector_Impl_","rotateWithTrig",0x6625995a,"flixel.math._FlxVector.FlxVector_Impl_.rotateWithTrig","flixel/math/FlxVector.hx",449,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_460_rightNormal,"flixel.math._FlxVector.FlxVector_Impl_","rightNormal",0xf5409926,"flixel.math._FlxVector.FlxVector_Impl_.rightNormal","flixel/math/FlxVector.hx",460,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_473_leftNormal,"flixel.math._FlxVector.FlxVector_Impl_","leftNormal",0xb5fc44eb,"flixel.math._FlxVector.FlxVector_Impl_.leftNormal","flixel/math/FlxVector.hx",473,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_486_negate,"flixel.math._FlxVector.FlxVector_Impl_","negate",0xb54b269f,"flixel.math._FlxVector.FlxVector_Impl_.negate","flixel/math/FlxVector.hx",486,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_494_negateNew,"flixel.math._FlxVector.FlxVector_Impl_","negateNew",0xf3050f01,"flixel.math._FlxVector.FlxVector_Impl_.negateNew","flixel/math/FlxVector.hx",494,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_506_projectTo,"flixel.math._FlxVector.FlxVector_Impl_","projectTo",0xc22147f7,"flixel.math._FlxVector.FlxVector_Impl_.projectTo","flixel/math/FlxVector.hx",506,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_528_projectToNormalized,"flixel.math._FlxVector.FlxVector_Impl_","projectToNormalized",0x93d9eb0e,"flixel.math._FlxVector.FlxVector_Impl_.projectToNormalized","flixel/math/FlxVector.hx",528,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_543_projectToNormalizedWeak,"flixel.math._FlxVector.FlxVector_Impl_","projectToNormalizedWeak",0x681612a6,"flixel.math._FlxVector.FlxVector_Impl_.projectToNormalizedWeak","flixel/math/FlxVector.hx",543,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_558_perpProduct,"flixel.math._FlxVector.FlxVector_Impl_","perpProduct",0x4ee6587f,"flixel.math._FlxVector.FlxVector_Impl_.perpProduct","flixel/math/FlxVector.hx",558,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_570_perpProductWeak,"flixel.math._FlxVector.FlxVector_Impl_","perpProductWeak",0x56a48c97,"flixel.math._FlxVector.FlxVector_Impl_.perpProductWeak","flixel/math/FlxVector.hx",570,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_582_ratio,"flixel.math._FlxVector.FlxVector_Impl_","ratio",0xc3335ace,"flixel.math._FlxVector.FlxVector_Impl_.ratio","flixel/math/FlxVector.hx",582,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_600_ratioWeak,"flixel.math._FlxVector.FlxVector_Impl_","ratioWeak",0xbf426266,"flixel.math._FlxVector.FlxVector_Impl_.ratioWeak","flixel/math/FlxVector.hx",600,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_621_findIntersection,"flixel.math._FlxVector.FlxVector_Impl_","findIntersection",0x5b7d2b3f,"flixel.math._FlxVector.FlxVector_Impl_.findIntersection","flixel/math/FlxVector.hx",621,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_653_findIntersectionInBounds,"flixel.math._FlxVector.FlxVector_Impl_","findIntersectionInBounds",0xded68e99,"flixel.math._FlxVector.FlxVector_Impl_.findIntersectionInBounds","flixel/math/FlxVector.hx",653,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_682_truncate,"flixel.math._FlxVector.FlxVector_Impl_","truncate",0x79145483,"flixel.math._FlxVector.FlxVector_Impl_.truncate","flixel/math/FlxVector.hx",682,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_694_radiansBetween,"flixel.math._FlxVector.FlxVector_Impl_","radiansBetween",0x91dd8f53,"flixel.math._FlxVector.FlxVector_Impl_.radiansBetween","flixel/math/FlxVector.hx",694,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_708_degreesBetween,"flixel.math._FlxVector.FlxVector_Impl_","degreesBetween",0xe72232be,"flixel.math._FlxVector.FlxVector_Impl_.degreesBetween","flixel/math/FlxVector.hx",708,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_718_sign,"flixel.math._FlxVector.FlxVector_Impl_","sign",0x12c793da,"flixel.math._FlxVector.FlxVector_Impl_.sign","flixel/math/FlxVector.hx",718,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_734_dist,"flixel.math._FlxVector.FlxVector_Impl_","dist",0x08dd6b03,"flixel.math._FlxVector.FlxVector_Impl_.dist","flixel/math/FlxVector.hx",734,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_741_distSquared,"flixel.math._FlxVector.FlxVector_Impl_","distSquared",0x862cfc64,"flixel.math._FlxVector.FlxVector_Impl_.distSquared","flixel/math/FlxVector.hx",741,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_756_bounce,"flixel.math._FlxVector.FlxVector_Impl_","bounce",0xb44f6a65,"flixel.math._FlxVector.FlxVector_Impl_.bounce","flixel/math/FlxVector.hx",756,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_773_bounceWithFriction,"flixel.math._FlxVector.FlxVector_Impl_","bounceWithFriction",0x204c5b25,"flixel.math._FlxVector.FlxVector_Impl_.bounceWithFriction","flixel/math/FlxVector.hx",773,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_793_isValid,"flixel.math._FlxVector.FlxVector_Impl_","isValid",0xebb47535,"flixel.math._FlxVector.FlxVector_Impl_.isValid","flixel/math/FlxVector.hx",793,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_803_clone,"flixel.math._FlxVector.FlxVector_Impl_","clone",0x27723920,"flixel.math._FlxVector.FlxVector_Impl_.clone","flixel/math/FlxVector.hx",803,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_816_get_x,"flixel.math._FlxVector.FlxVector_Impl_","get_x",0x706fcb12,"flixel.math._FlxVector.FlxVector_Impl_.get_x","flixel/math/FlxVector.hx",816,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_821_set_x,"flixel.math._FlxVector.FlxVector_Impl_","set_x",0x593ec11e,"flixel.math._FlxVector.FlxVector_Impl_.set_x","flixel/math/FlxVector.hx",821,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_826_get_y,"flixel.math._FlxVector.FlxVector_Impl_","get_y",0x706fcb13,"flixel.math._FlxVector.FlxVector_Impl_.get_y","flixel/math/FlxVector.hx",826,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_831_set_y,"flixel.math._FlxVector.FlxVector_Impl_","set_y",0x593ec11f,"flixel.math._FlxVector.FlxVector_Impl_.set_y","flixel/math/FlxVector.hx",831,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_835_get_dx,"flixel.math._FlxVector.FlxVector_Impl_","get_dx",0xf161d3ba,"flixel.math._FlxVector.FlxVector_Impl_.get_dx","flixel/math/FlxVector.hx",835,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_843_get_dy,"flixel.math._FlxVector.FlxVector_Impl_","get_dy",0xf161d3bb,"flixel.math._FlxVector.FlxVector_Impl_.get_dy","flixel/math/FlxVector.hx",843,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_852_get_length,"flixel.math._FlxVector.FlxVector_Impl_","get_length",0xe6111c0c,"flixel.math._FlxVector.FlxVector_Impl_.get_length","flixel/math/FlxVector.hx",852,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_856_set_length,"flixel.math._FlxVector.FlxVector_Impl_","set_length",0xe98eba80,"flixel.math._FlxVector.FlxVector_Impl_.set_length","flixel/math/FlxVector.hx",856,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_868_get_lengthSquared,"flixel.math._FlxVector.FlxVector_Impl_","get_lengthSquared",0xe9076e7b,"flixel.math._FlxVector.FlxVector_Impl_.get_lengthSquared","flixel/math/FlxVector.hx",868,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_873_get_degrees,"flixel.math._FlxVector.FlxVector_Impl_","get_degrees",0x1ba79dc1,"flixel.math._FlxVector.FlxVector_Impl_.get_degrees","flixel/math/FlxVector.hx",873,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_877_set_degrees,"flixel.math._FlxVector.FlxVector_Impl_","set_degrees",0x2614a4cd,"flixel.math._FlxVector.FlxVector_Impl_.set_degrees","flixel/math/FlxVector.hx",877,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_883_get_radians,"flixel.math._FlxVector.FlxVector_Impl_","get_radians",0x083d008c,"flixel.math._FlxVector.FlxVector_Impl_.get_radians","flixel/math/FlxVector.hx",883,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_891_set_radians,"flixel.math._FlxVector.FlxVector_Impl_","set_radians",0x12aa0798,"flixel.math._FlxVector.FlxVector_Impl_.set_radians","flixel/math/FlxVector.hx",891,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_901_get_rx,"flixel.math._FlxVector.FlxVector_Impl_","get_rx",0xf161dfec,"flixel.math._FlxVector.FlxVector_Impl_.get_rx","flixel/math/FlxVector.hx",901,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_906_get_ry,"flixel.math._FlxVector.FlxVector_Impl_","get_ry",0xf161dfed,"flixel.math._FlxVector.FlxVector_Impl_.get_ry","flixel/math/FlxVector.hx",906,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_911_get_lx,"flixel.math._FlxVector.FlxVector_Impl_","get_lx",0xf161dab2,"flixel.math._FlxVector.FlxVector_Impl_.get_lx","flixel/math/FlxVector.hx",911,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_916_get_ly,"flixel.math._FlxVector.FlxVector_Impl_","get_ly",0xf161dab3,"flixel.math._FlxVector.FlxVector_Impl_.get_ly","flixel/math/FlxVector.hx",916,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_921_get_pool,"flixel.math._FlxVector.FlxVector_Impl_","get_pool",0x7431d282,"flixel.math._FlxVector.FlxVector_Impl_.get_pool","flixel/math/FlxVector.hx",921,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_12_boot,"flixel.math._FlxVector.FlxVector_Impl_","boot",0x078f87cf,"flixel.math._FlxVector.FlxVector_Impl_.boot","flixel/math/FlxVector.hx",12,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_13_boot,"flixel.math._FlxVector.FlxVector_Impl_","boot",0x078f87cf,"flixel.math._FlxVector.FlxVector_Impl_.boot","flixel/math/FlxVector.hx",13,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_15_boot,"flixel.math._FlxVector.FlxVector_Impl_","boot",0x078f87cf,"flixel.math._FlxVector.FlxVector_Impl_.boot","flixel/math/FlxVector.hx",15,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_16_boot,"flixel.math._FlxVector.FlxVector_Impl_","boot",0x078f87cf,"flixel.math._FlxVector.FlxVector_Impl_.boot","flixel/math/FlxVector.hx",16,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5cc336e8df399df1_17_boot,"flixel.math._FlxVector.FlxVector_Impl_","boot",0x078f87cf,"flixel.math._FlxVector.FlxVector_Impl_.boot","flixel/math/FlxVector.hx",17,0x1fcaa75d)
namespace flixel{
namespace math{
namespace _FlxVector{

void FlxVector_Impl__obj::__construct() { }

Dynamic FlxVector_Impl__obj::__CreateEmpty() { return new FlxVector_Impl__obj; }

void *FlxVector_Impl__obj::_hx_vtable = 0;

Dynamic FlxVector_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxVector_Impl__obj > _hx_result = new FlxVector_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxVector_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x156851fb;
}

Float FlxVector_Impl__obj::EPSILON;

Float FlxVector_Impl__obj::EPSILON_SQUARED;

 ::flixel::math::FlxPoint FlxVector_Impl__obj::_vector1;

 ::flixel::math::FlxPoint FlxVector_Impl__obj::_vector2;

 ::flixel::math::FlxPoint FlxVector_Impl__obj::_vector3;

 ::flixel::math::FlxPoint FlxVector_Impl__obj::get(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_30_get)
HXDLIN(  30)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(x,y);
HXDLIN(  30)		point->_inPool = false;
HXDLIN(  30)		return point;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,get,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::weak(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_43_weak)
HXDLIN(  43)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(x,y);
HXDLIN(  43)		point->_inPool = false;
HXDLIN(  43)		 ::flixel::math::FlxPoint point1 = point;
HXDLIN(  43)		point1->_weak = true;
HXDLIN(  43)		return point1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,weak,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::_new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_5cc336e8df399df1_100__new)
HXDLIN( 100)		 ::flixel::math::FlxPoint this1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,x,y);
HXDLIN( 100)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,_new,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::set( ::flixel::math::FlxPoint this1,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_113_set)
HXDLIN( 113)		return this1->set(x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxVector_Impl__obj,set,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::add( ::flixel::math::FlxPoint this1,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_125_add)
HXDLIN( 125)		{
HXDLIN( 125)			 ::flixel::math::FlxPoint _g = this1;
HXDLIN( 125)			_g->set_x((_g->x + x));
            		}
HXDLIN( 125)		{
HXDLIN( 125)			 ::flixel::math::FlxPoint _g1 = this1;
HXDLIN( 125)			_g1->set_y((_g1->y + y));
            		}
HXDLIN( 125)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxVector_Impl__obj,add,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::addPoint( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_136_addPoint)
HXDLIN( 136)		return this1->addPoint(point);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,addPoint,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::subtract( ::flixel::math::FlxPoint this1,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_148_subtract)
HXDLIN( 148)		{
HXDLIN( 148)			 ::flixel::math::FlxPoint _g = this1;
HXDLIN( 148)			_g->set_x((_g->x - x));
            		}
HXDLIN( 148)		{
HXDLIN( 148)			 ::flixel::math::FlxPoint _g1 = this1;
HXDLIN( 148)			_g1->set_y((_g1->y - y));
            		}
HXDLIN( 148)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxVector_Impl__obj,subtract,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::subtractPoint( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_159_subtractPoint)
HXDLIN( 159)		return this1->subtractPoint(point);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,subtractPoint,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::scale( ::flixel::math::FlxPoint this1,Float k){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_170_scale)
HXDLIN( 170)		return this1->scale(k);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,scale,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::scaleNew( ::flixel::math::FlxPoint this1,Float k){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_181_scaleNew)
HXDLIN( 181)		return ::flixel::math::_FlxVector::FlxVector_Impl__obj::clone(this1,null())->scale(k);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,scaleNew,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::addNew( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_192_addNew)
HXDLIN( 192)		return ::flixel::math::_FlxVector::FlxVector_Impl__obj::clone(this1,null())->addPoint(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,addNew,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::subtractNew( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_203_subtractNew)
HXDLIN( 203)		return ::flixel::math::_FlxVector::FlxVector_Impl__obj::clone(this1,null())->subtractPoint(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,subtractNew,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::copyFrom( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_214_copyFrom)
HXDLIN( 214)		this1->set_x(point->x);
HXDLIN( 214)		this1->set_y(point->y);
HXDLIN( 214)		if (point->_weak) {
HXDLIN( 214)			point->put();
            		}
HXDLIN( 214)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,copyFrom,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::copyFromFlash( ::flixel::math::FlxPoint this1, ::openfl::geom::Point flashPoint){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_225_copyFromFlash)
HXDLIN( 225)		this1->set_x(flashPoint->x);
HXDLIN( 225)		this1->set_y(flashPoint->y);
HXDLIN( 225)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,copyFromFlash,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::floor( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_233_floor)
HXDLIN( 233)		this1->set_x(::Math_obj::floor(this1->x));
HXDLIN( 233)		this1->set_y(::Math_obj::floor(this1->y));
HXDLIN( 233)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,floor,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::ceil( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_241_ceil)
HXDLIN( 241)		this1->set_x(::Math_obj::ceil(this1->x));
HXDLIN( 241)		this1->set_y(::Math_obj::ceil(this1->y));
HXDLIN( 241)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,ceil,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::round( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_249_round)
HXDLIN( 249)		this1->set_x(::Math_obj::round(this1->x));
HXDLIN( 249)		this1->set_y(::Math_obj::round(this1->y));
HXDLIN( 249)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,round,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::rotate( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint pivot,Float angle){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_261_rotate)
HXDLIN( 261)		return this1->rotate(pivot,angle);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxVector_Impl__obj,rotate,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::transform( ::flixel::math::FlxPoint this1, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_271_transform)
HXDLIN( 271)		Float x1 = (this1->x * matrix->a);
HXDLIN( 271)		Float x11 = ((x1 + (this1->y * matrix->c)) + matrix->tx);
HXDLIN( 271)		Float y1 = (this1->x * matrix->b);
HXDLIN( 271)		Float y11 = ((y1 + (this1->y * matrix->d)) + matrix->ty);
HXDLIN( 271)		return this1->set(x11,y11);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,transform,return )

Float FlxVector_Impl__obj::dotProduct( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_281_dotProduct)
HXLINE( 282)		Float dp = (this1->x * v->x);
HXDLIN( 282)		Float dp1 = (dp + (this1->y * v->y));
HXLINE( 283)		if (v->_weak) {
HXLINE( 283)			v->put();
            		}
HXLINE( 284)		return dp1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,dotProduct,return )

Float FlxVector_Impl__obj::dotProductWeak( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_296_dotProductWeak)
HXDLIN( 296)		Float _hx_tmp = (this1->x * v->x);
HXDLIN( 296)		return (_hx_tmp + (this1->y * v->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,dotProductWeak,return )

Float FlxVector_Impl__obj::dotProdWithNormalizing( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_306_dotProdWithNormalizing)
HXLINE( 307)		 ::flixel::math::FlxPoint normalized = ::flixel::math::_FlxVector::FlxVector_Impl__obj::normalize(::flixel::math::_FlxVector::FlxVector_Impl__obj::clone(v,::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1));
HXLINE( 308)		if (v->_weak) {
HXLINE( 308)			v->put();
            		}
HXLINE( 309)		Float _hx_tmp = (this1->x * normalized->x);
HXDLIN( 309)		return (_hx_tmp + (this1->y * normalized->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,dotProdWithNormalizing,return )

bool FlxVector_Impl__obj::isPerpendicular( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_320_isPerpendicular)
HXDLIN( 320)		Float dp = (this1->x * v->x);
HXDLIN( 320)		Float dp1 = (dp + (this1->y * v->y));
HXDLIN( 320)		if (v->_weak) {
HXDLIN( 320)			v->put();
            		}
HXDLIN( 320)		return (::Math_obj::abs(dp1) < ((Float)9.9999999999999984e-015));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,isPerpendicular,return )

Float FlxVector_Impl__obj::crossProductLength( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_330_crossProductLength)
HXLINE( 331)		Float cp = (this1->x * v->y);
HXDLIN( 331)		Float cp1 = (cp - (this1->y * v->x));
HXLINE( 332)		if (v->_weak) {
HXLINE( 332)			v->put();
            		}
HXLINE( 333)		return cp1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,crossProductLength,return )

Float FlxVector_Impl__obj::crossProductLengthWeak( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_345_crossProductLengthWeak)
HXDLIN( 345)		Float _hx_tmp = (this1->x * v->y);
HXDLIN( 345)		return (_hx_tmp - (this1->y * v->x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,crossProductLengthWeak,return )

bool FlxVector_Impl__obj::isParallel( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_355_isParallel)
HXLINE( 356)		Float p = (this1->x * v->y);
HXDLIN( 356)		bool p1 = (::Math_obj::abs((p - (this1->y * v->x))) < ((Float)9.9999999999999984e-015));
HXLINE( 357)		if (v->_weak) {
HXLINE( 357)			v->put();
            		}
HXLINE( 358)		return p1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,isParallel,return )

bool FlxVector_Impl__obj::isParallelWeak( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_370_isParallelWeak)
HXDLIN( 370)		Float _hx_tmp = (this1->x * v->y);
HXDLIN( 370)		return (::Math_obj::abs((_hx_tmp - (this1->y * v->x))) < ((Float)9.9999999999999984e-015));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,isParallelWeak,return )

bool FlxVector_Impl__obj::isZero( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_380_isZero)
HXDLIN( 380)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXDLIN( 380)			return (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXDLIN( 380)			return false;
            		}
HXDLIN( 380)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,isZero,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::zero( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_387_zero)
HXLINE( 388)		this1->set_x(this1->set_y((int)0));
HXLINE( 389)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,zero,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::normalize( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_396_normalize)
HXLINE( 397)		bool _hx_tmp;
HXDLIN( 397)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE( 397)			_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 397)			_hx_tmp = false;
            		}
HXDLIN( 397)		if (_hx_tmp) {
HXLINE( 399)			return this1;
            		}
HXLINE( 401)		Float k = (this1->x * this1->x);
HXDLIN( 401)		return this1->scale(((Float)(int)1 / (Float)::Math_obj::sqrt((k + (this1->y * this1->y)))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,normalize,return )

bool FlxVector_Impl__obj::isNormalized( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_409_isNormalized)
HXDLIN( 409)		Float _hx_tmp = (this1->x * this1->x);
HXDLIN( 409)		return (::Math_obj::abs(((_hx_tmp + (this1->y * this1->y)) - (int)1)) < ((Float)9.9999999999999984e-015));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,isNormalized,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::rotateByRadians( ::flixel::math::FlxPoint this1,Float rads){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_419_rotateByRadians)
HXLINE( 420)		Float s = ::Math_obj::sin(rads);
HXLINE( 421)		Float c = ::Math_obj::cos(rads);
HXLINE( 422)		Float tempX = this1->x;
HXLINE( 424)		this1->set_x(((tempX * c) - (this1->y * s)));
HXLINE( 425)		this1->set_y(((tempX * s) + (this1->y * c)));
HXLINE( 427)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,rotateByRadians,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::rotateByDegrees( ::flixel::math::FlxPoint this1,Float degs){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_438_rotateByDegrees)
HXDLIN( 438)		Float rads = (degs * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 438)		Float s = ::Math_obj::sin(rads);
HXDLIN( 438)		Float c = ::Math_obj::cos(rads);
HXDLIN( 438)		Float tempX = this1->x;
HXDLIN( 438)		this1->set_x(((tempX * c) - (this1->y * s)));
HXDLIN( 438)		this1->set_y(((tempX * s) + (this1->y * c)));
HXDLIN( 438)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,rotateByDegrees,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::rotateWithTrig( ::flixel::math::FlxPoint this1,Float sin,Float cos){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_449_rotateWithTrig)
HXLINE( 450)		Float tempX = this1->x;
HXLINE( 451)		this1->set_x(((tempX * cos) - (this1->y * sin)));
HXLINE( 452)		this1->set_y(((tempX * sin) + (this1->y * cos)));
HXLINE( 453)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxVector_Impl__obj,rotateWithTrig,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::rightNormal( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint vec){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_460_rightNormal)
HXLINE( 461)		if (hx::IsNull( vec )) {
HXLINE( 463)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 463)			point->_inPool = false;
HXDLIN( 463)			vec = point;
            		}
HXLINE( 465)		vec->set(-(this1->y),this1->x);
HXLINE( 466)		return vec;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,rightNormal,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::leftNormal( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint vec){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_473_leftNormal)
HXLINE( 474)		if (hx::IsNull( vec )) {
HXLINE( 476)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 476)			point->_inPool = false;
HXDLIN( 476)			vec = point;
            		}
HXLINE( 478)		vec->set(this1->y,-(this1->x));
HXLINE( 479)		return vec;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,leftNormal,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::negate( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_486_negate)
HXLINE( 487)		{
HXLINE( 487)			 ::flixel::math::FlxPoint _g = this1;
HXDLIN( 487)			_g->set_x((_g->x * (int)-1));
            		}
HXLINE( 488)		{
HXLINE( 488)			 ::flixel::math::FlxPoint _g1 = this1;
HXDLIN( 488)			_g1->set_y((_g1->y * (int)-1));
            		}
HXLINE( 489)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,negate,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::negateNew( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_494_negateNew)
HXDLIN( 494)		 ::flixel::math::FlxPoint this2 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::clone(this1,null());
HXDLIN( 494)		{
HXDLIN( 494)			 ::flixel::math::FlxPoint _g = this2;
HXDLIN( 494)			_g->set_x((_g->x * (int)-1));
            		}
HXDLIN( 494)		{
HXDLIN( 494)			 ::flixel::math::FlxPoint _g1 = this2;
HXDLIN( 494)			_g1->set_y((_g1->y * (int)-1));
            		}
HXDLIN( 494)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,negateNew,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::projectTo( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v, ::flixel::math::FlxPoint proj){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_506_projectTo)
HXLINE( 507)		Float dp = (this1->x * v->x);
HXDLIN( 507)		Float dp1 = (dp + (this1->y * v->y));
HXLINE( 508)		Float lenSq = (v->x * v->x);
HXDLIN( 508)		Float lenSq1 = (lenSq + (v->y * v->y));
HXLINE( 510)		if (hx::IsNull( proj )) {
HXLINE( 512)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 512)			point->_inPool = false;
HXDLIN( 512)			proj = point;
            		}
HXLINE( 515)		proj->set(((Float)(dp1 * v->x) / (Float)lenSq1),((Float)(dp1 * v->y) / (Float)lenSq1));
HXLINE( 516)		if (v->_weak) {
HXLINE( 516)			v->put();
            		}
HXLINE( 517)		return proj;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxVector_Impl__obj,projectTo,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::projectToNormalized( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v, ::flixel::math::FlxPoint proj){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_528_projectToNormalized)
HXLINE( 529)		 ::flixel::math::FlxPoint proj1 = proj;
HXDLIN( 529)		Float dp = (this1->x * v->x);
HXDLIN( 529)		Float dp1 = (dp + (this1->y * v->y));
HXDLIN( 529)		if (hx::IsNull( proj1 )) {
HXLINE( 529)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 529)			point->_inPool = false;
HXDLIN( 529)			proj1 = point;
            		}
HXDLIN( 529)		proj = proj1->set((dp1 * v->x),(dp1 * v->y));
HXLINE( 530)		if (v->_weak) {
HXLINE( 530)			v->put();
            		}
HXLINE( 531)		return proj;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxVector_Impl__obj,projectToNormalized,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::projectToNormalizedWeak( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v, ::flixel::math::FlxPoint proj){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_543_projectToNormalizedWeak)
HXLINE( 544)		Float dp = (this1->x * v->x);
HXDLIN( 544)		Float dp1 = (dp + (this1->y * v->y));
HXLINE( 546)		if (hx::IsNull( proj )) {
HXLINE( 548)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 548)			point->_inPool = false;
HXDLIN( 548)			proj = point;
            		}
HXLINE( 551)		return proj->set((dp1 * v->x),(dp1 * v->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxVector_Impl__obj,projectToNormalizedWeak,return )

Float FlxVector_Impl__obj::perpProduct( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_558_perpProduct)
HXLINE( 559)		Float pp = (this1->y * v->x);
HXDLIN( 559)		Float pp1 = (pp + (-(this1->x) * v->y));
HXLINE( 560)		if (v->_weak) {
HXLINE( 560)			v->put();
            		}
HXLINE( 561)		return pp1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,perpProduct,return )

Float FlxVector_Impl__obj::perpProductWeak( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_570_perpProductWeak)
HXDLIN( 570)		Float _hx_tmp = (this1->y * v->x);
HXDLIN( 570)		return (_hx_tmp + (-(this1->x) * v->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,perpProductWeak,return )

Float FlxVector_Impl__obj::ratio( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint a, ::flixel::math::FlxPoint b, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_582_ratio)
HXLINE( 583)		Float r;
HXDLIN( 583)		Float r1 = (this1->x * v->y);
HXDLIN( 583)		if ((::Math_obj::abs((r1 - (this1->y * v->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE( 583)			r = ::Math_obj::NaN;
            		}
            		else {
HXLINE( 583)			bool r2;
HXDLIN( 583)			Float r3 = (this1->x * this1->x);
HXDLIN( 583)			if (!(((r3 + (this1->y * this1->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE( 583)				Float r4 = (v->x * v->x);
HXDLIN( 583)				r2 = ((r4 + (v->y * v->y)) < ((Float)9.9999999999999984e-015));
            			}
            			else {
HXLINE( 583)				r2 = true;
            			}
HXDLIN( 583)			if (r2) {
HXLINE( 583)				r = ::Math_obj::NaN;
            			}
            			else {
HXLINE( 583)				::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::clone(b,::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1);
HXDLIN( 583)				{
HXLINE( 583)					 ::flixel::math::FlxPoint _this = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 583)					{
HXLINE( 583)						 ::flixel::math::FlxPoint _g = _this;
HXDLIN( 583)						_g->set_x((_g->x - a->x));
            					}
HXDLIN( 583)					{
HXLINE( 583)						 ::flixel::math::FlxPoint _g1 = _this;
HXDLIN( 583)						_g1->set_y((_g1->y - a->y));
            					}
            				}
HXDLIN( 583)				 ::flixel::math::FlxPoint this2 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 583)				Float r5 = (this2->y * v->x);
HXDLIN( 583)				Float r6 = (r5 + (-(this2->x) * v->y));
HXDLIN( 583)				Float r7 = (this1->y * v->x);
HXDLIN( 583)				r = ((Float)r6 / (Float)(r7 + (-(this1->x) * v->y)));
            			}
            		}
HXLINE( 584)		if (a->_weak) {
HXLINE( 584)			a->put();
            		}
HXLINE( 585)		if (b->_weak) {
HXLINE( 585)			b->put();
            		}
HXLINE( 586)		if (v->_weak) {
HXLINE( 586)			v->put();
            		}
HXLINE( 587)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxVector_Impl__obj,ratio,return )

Float FlxVector_Impl__obj::ratioWeak( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint a, ::flixel::math::FlxPoint b, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_600_ratioWeak)
HXLINE( 601)		Float _hx_tmp = (this1->x * v->y);
HXDLIN( 601)		if ((::Math_obj::abs((_hx_tmp - (this1->y * v->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE( 602)			return ::Math_obj::NaN;
            		}
HXLINE( 603)		bool _hx_tmp1;
HXDLIN( 603)		Float _hx_tmp2 = (this1->x * this1->x);
HXDLIN( 603)		if (!(((_hx_tmp2 + (this1->y * this1->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE( 603)			Float _hx_tmp3 = (v->x * v->x);
HXDLIN( 603)			_hx_tmp1 = ((_hx_tmp3 + (v->y * v->y)) < ((Float)9.9999999999999984e-015));
            		}
            		else {
HXLINE( 603)			_hx_tmp1 = true;
            		}
HXDLIN( 603)		if (_hx_tmp1) {
HXLINE( 604)			return ::Math_obj::NaN;
            		}
HXLINE( 606)		::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::clone(b,::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1);
HXLINE( 607)		{
HXLINE( 607)			 ::flixel::math::FlxPoint _this = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 607)			{
HXLINE( 607)				 ::flixel::math::FlxPoint _g = _this;
HXDLIN( 607)				_g->set_x((_g->x - a->x));
            			}
HXDLIN( 607)			{
HXLINE( 607)				 ::flixel::math::FlxPoint _g1 = _this;
HXDLIN( 607)				_g1->set_y((_g1->y - a->y));
            			}
            		}
HXLINE( 609)		 ::flixel::math::FlxPoint this2 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 609)		Float _hx_tmp4 = (this2->y * v->x);
HXDLIN( 609)		Float _hx_tmp5 = (_hx_tmp4 + (-(this2->x) * v->y));
HXDLIN( 609)		Float _hx_tmp6 = (this1->y * v->x);
HXDLIN( 609)		return ((Float)_hx_tmp5 / (Float)(_hx_tmp6 + (-(this1->x) * v->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxVector_Impl__obj,ratioWeak,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::findIntersection( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint a, ::flixel::math::FlxPoint b, ::flixel::math::FlxPoint v, ::flixel::math::FlxPoint intersection){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_621_findIntersection)
HXLINE( 622)		Float t;
HXDLIN( 622)		Float t1 = (this1->x * v->y);
HXDLIN( 622)		if ((::Math_obj::abs((t1 - (this1->y * v->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE( 622)			t = ::Math_obj::NaN;
            		}
            		else {
HXLINE( 622)			bool t2;
HXDLIN( 622)			Float t3 = (this1->x * this1->x);
HXDLIN( 622)			if (!(((t3 + (this1->y * this1->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE( 622)				Float t4 = (v->x * v->x);
HXDLIN( 622)				t2 = ((t4 + (v->y * v->y)) < ((Float)9.9999999999999984e-015));
            			}
            			else {
HXLINE( 622)				t2 = true;
            			}
HXDLIN( 622)			if (t2) {
HXLINE( 622)				t = ::Math_obj::NaN;
            			}
            			else {
HXLINE( 622)				::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::clone(b,::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1);
HXDLIN( 622)				{
HXLINE( 622)					 ::flixel::math::FlxPoint _this = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 622)					{
HXLINE( 622)						 ::flixel::math::FlxPoint _g = _this;
HXDLIN( 622)						_g->set_x((_g->x - a->x));
            					}
HXDLIN( 622)					{
HXLINE( 622)						 ::flixel::math::FlxPoint _g1 = _this;
HXDLIN( 622)						_g1->set_y((_g1->y - a->y));
            					}
            				}
HXDLIN( 622)				 ::flixel::math::FlxPoint this2 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 622)				Float t5 = (this2->y * v->x);
HXDLIN( 622)				Float t6 = (t5 + (-(this2->x) * v->y));
HXDLIN( 622)				Float t7 = (this1->y * v->x);
HXDLIN( 622)				t = ((Float)t6 / (Float)(t7 + (-(this1->x) * v->y)));
            			}
            		}
HXLINE( 624)		if (hx::IsNull( intersection )) {
HXLINE( 626)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 626)			point->_inPool = false;
HXDLIN( 626)			intersection = point;
            		}
HXLINE( 629)		if (::Math_obj::isNaN(t)) {
HXLINE( 631)			intersection->set(::Math_obj::NaN,::Math_obj::NaN);
            		}
            		else {
HXLINE( 635)			Float a1 = a->x;
HXDLIN( 635)			Float a2 = a->y;
HXDLIN( 635)			intersection->set((a1 + (t * this1->x)),(a2 + (t * this1->y)));
            		}
HXLINE( 638)		if (a->_weak) {
HXLINE( 638)			a->put();
            		}
HXLINE( 639)		if (b->_weak) {
HXLINE( 639)			b->put();
            		}
HXLINE( 640)		if (v->_weak) {
HXLINE( 640)			v->put();
            		}
HXLINE( 641)		return intersection;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxVector_Impl__obj,findIntersection,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::findIntersectionInBounds( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint a, ::flixel::math::FlxPoint b, ::flixel::math::FlxPoint v, ::flixel::math::FlxPoint intersection){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_653_findIntersectionInBounds)
HXLINE( 654)		if (hx::IsNull( intersection )) {
HXLINE( 656)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 656)			point->_inPool = false;
HXDLIN( 656)			intersection = point;
            		}
HXLINE( 659)		Float t1;
HXDLIN( 659)		Float t11 = (this1->x * v->y);
HXDLIN( 659)		if ((::Math_obj::abs((t11 - (this1->y * v->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE( 659)			t1 = ::Math_obj::NaN;
            		}
            		else {
HXLINE( 659)			bool t12;
HXDLIN( 659)			Float t13 = (this1->x * this1->x);
HXDLIN( 659)			if (!(((t13 + (this1->y * this1->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE( 659)				Float t14 = (v->x * v->x);
HXDLIN( 659)				t12 = ((t14 + (v->y * v->y)) < ((Float)9.9999999999999984e-015));
            			}
            			else {
HXLINE( 659)				t12 = true;
            			}
HXDLIN( 659)			if (t12) {
HXLINE( 659)				t1 = ::Math_obj::NaN;
            			}
            			else {
HXLINE( 659)				::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::clone(b,::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1);
HXDLIN( 659)				{
HXLINE( 659)					 ::flixel::math::FlxPoint _this = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 659)					{
HXLINE( 659)						 ::flixel::math::FlxPoint _g = _this;
HXDLIN( 659)						_g->set_x((_g->x - a->x));
            					}
HXDLIN( 659)					{
HXLINE( 659)						 ::flixel::math::FlxPoint _g1 = _this;
HXDLIN( 659)						_g1->set_y((_g1->y - a->y));
            					}
            				}
HXDLIN( 659)				 ::flixel::math::FlxPoint this2 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 659)				Float t15 = (this2->y * v->x);
HXDLIN( 659)				Float t16 = (t15 + (-(this2->x) * v->y));
HXDLIN( 659)				Float t17 = (this1->y * v->x);
HXDLIN( 659)				t1 = ((Float)t16 / (Float)(t17 + (-(this1->x) * v->y)));
            			}
            		}
HXLINE( 660)		Float t2;
HXDLIN( 660)		Float t21 = (v->x * this1->y);
HXDLIN( 660)		if ((::Math_obj::abs((t21 - (v->y * this1->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE( 660)			t2 = ::Math_obj::NaN;
            		}
            		else {
HXLINE( 660)			bool t22;
HXDLIN( 660)			Float t23 = (v->x * v->x);
HXDLIN( 660)			if (!(((t23 + (v->y * v->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE( 660)				Float t24 = (this1->x * this1->x);
HXDLIN( 660)				t22 = ((t24 + (this1->y * this1->y)) < ((Float)9.9999999999999984e-015));
            			}
            			else {
HXLINE( 660)				t22 = true;
            			}
HXDLIN( 660)			if (t22) {
HXLINE( 660)				t2 = ::Math_obj::NaN;
            			}
            			else {
HXLINE( 660)				::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::clone(a,::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1);
HXDLIN( 660)				{
HXLINE( 660)					 ::flixel::math::FlxPoint _this1 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 660)					{
HXLINE( 660)						 ::flixel::math::FlxPoint _g2 = _this1;
HXDLIN( 660)						_g2->set_x((_g2->x - b->x));
            					}
HXDLIN( 660)					{
HXLINE( 660)						 ::flixel::math::FlxPoint _g3 = _this1;
HXDLIN( 660)						_g3->set_y((_g3->y - b->y));
            					}
            				}
HXDLIN( 660)				 ::flixel::math::FlxPoint this3 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 660)				Float t25 = (this3->y * this1->x);
HXDLIN( 660)				Float t26 = (t25 + (-(this3->x) * this1->y));
HXDLIN( 660)				Float t27 = (v->y * this1->x);
HXDLIN( 660)				t2 = ((Float)t26 / (Float)(t27 + (-(v->x) * this1->y)));
            			}
            		}
HXLINE( 661)		bool _hx_tmp;
HXDLIN( 661)		bool _hx_tmp1;
HXDLIN( 661)		bool _hx_tmp2;
HXDLIN( 661)		bool _hx_tmp3;
HXDLIN( 661)		bool _hx_tmp4;
HXDLIN( 661)		if (!(::Math_obj::isNaN(t1))) {
HXLINE( 661)			_hx_tmp4 = !(::Math_obj::isNaN(t2));
            		}
            		else {
HXLINE( 661)			_hx_tmp4 = false;
            		}
HXDLIN( 661)		if (_hx_tmp4) {
HXLINE( 661)			_hx_tmp3 = (t1 > (int)0);
            		}
            		else {
HXLINE( 661)			_hx_tmp3 = false;
            		}
HXDLIN( 661)		if (_hx_tmp3) {
HXLINE( 661)			_hx_tmp2 = (t1 <= (int)1);
            		}
            		else {
HXLINE( 661)			_hx_tmp2 = false;
            		}
HXDLIN( 661)		if (_hx_tmp2) {
HXLINE( 661)			_hx_tmp1 = (t2 > (int)0);
            		}
            		else {
HXLINE( 661)			_hx_tmp1 = false;
            		}
HXDLIN( 661)		if (_hx_tmp1) {
HXLINE( 661)			_hx_tmp = (t2 <= (int)1);
            		}
            		else {
HXLINE( 661)			_hx_tmp = false;
            		}
HXDLIN( 661)		if (_hx_tmp) {
HXLINE( 663)			Float a1 = a->x;
HXDLIN( 663)			Float a2 = a->y;
HXDLIN( 663)			intersection->set((a1 + (t1 * this1->x)),(a2 + (t1 * this1->y)));
            		}
            		else {
HXLINE( 667)			intersection->set(::Math_obj::NaN,::Math_obj::NaN);
            		}
HXLINE( 670)		if (a->_weak) {
HXLINE( 670)			a->put();
            		}
HXLINE( 671)		if (b->_weak) {
HXLINE( 671)			b->put();
            		}
HXLINE( 672)		if (v->_weak) {
HXLINE( 672)			v->put();
            		}
HXLINE( 673)		return intersection;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxVector_Impl__obj,findIntersectionInBounds,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::truncate( ::flixel::math::FlxPoint this1,Float max){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_682_truncate)
HXLINE( 683)		{
HXLINE( 683)			Float l = (this1->x * this1->x);
HXDLIN( 683)			Float l1 = ::Math_obj::min(max,::Math_obj::sqrt((l + (this1->y * this1->y))));
HXDLIN( 683)			bool _hx_tmp;
HXDLIN( 683)			if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE( 683)				_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            			}
            			else {
HXLINE( 683)				_hx_tmp = false;
            			}
HXDLIN( 683)			if (!(_hx_tmp)) {
HXLINE( 683)				Float a = ::flixel::math::_FlxVector::FlxVector_Impl__obj::get_radians(this1);
HXDLIN( 683)				this1->set_x((l1 * ::Math_obj::cos(a)));
HXDLIN( 683)				this1->set_y((l1 * ::Math_obj::sin(a)));
            			}
            		}
HXLINE( 684)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,truncate,return )

Float FlxVector_Impl__obj::radiansBetween( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_694_radiansBetween)
HXLINE( 695)		Float rads = (this1->x * v->x);
HXDLIN( 695)		Float rads1 = (rads + (this1->y * v->y));
HXDLIN( 695)		Float rads2 = (this1->x * this1->x);
HXDLIN( 695)		Float rads3 = ::Math_obj::sqrt((rads2 + (this1->y * this1->y)));
HXDLIN( 695)		Float rads4 = (v->x * v->x);
HXDLIN( 695)		Float rads5 = ::Math_obj::acos(((Float)rads1 / (Float)(rads3 * ::Math_obj::sqrt((rads4 + (v->y * v->y))))));
HXLINE( 696)		if (v->_weak) {
HXLINE( 696)			v->put();
            		}
HXLINE( 697)		return rads5;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,radiansBetween,return )

Float FlxVector_Impl__obj::degreesBetween( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_708_degreesBetween)
HXDLIN( 708)		Float rads = (this1->x * v->x);
HXDLIN( 708)		Float rads1 = (rads + (this1->y * v->y));
HXDLIN( 708)		Float rads2 = (this1->x * this1->x);
HXDLIN( 708)		Float rads3 = ::Math_obj::sqrt((rads2 + (this1->y * this1->y)));
HXDLIN( 708)		Float rads4 = (v->x * v->x);
HXDLIN( 708)		Float rads5 = ::Math_obj::acos(((Float)rads1 / (Float)(rads3 * ::Math_obj::sqrt((rads4 + (v->y * v->y))))));
HXDLIN( 708)		if (v->_weak) {
HXDLIN( 708)			v->put();
            		}
HXDLIN( 708)		Float _hx_tmp = rads5;
HXDLIN( 708)		return (_hx_tmp * ((Float)(int)180 / (Float)::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,degreesBetween,return )

int FlxVector_Impl__obj::sign( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint a, ::flixel::math::FlxPoint b){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_718_sign)
HXLINE( 719)		Float signFl = (a->x - this1->x);
HXDLIN( 719)		Float signFl1 = (signFl * (b->y - this1->y));
HXDLIN( 719)		Float signFl2 = (a->y - this1->y);
HXDLIN( 719)		Float signFl3 = (signFl1 - (signFl2 * (b->x - this1->x)));
HXLINE( 720)		if (a->_weak) {
HXLINE( 720)			a->put();
            		}
HXLINE( 721)		if (b->_weak) {
HXLINE( 721)			b->put();
            		}
HXLINE( 722)		if ((signFl3 == (int)0)) {
HXLINE( 724)			return (int)0;
            		}
HXLINE( 726)		return ::Math_obj::round(((Float)signFl3 / (Float)::Math_obj::abs(signFl3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxVector_Impl__obj,sign,return )

Float FlxVector_Impl__obj::dist( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_734_dist)
HXDLIN( 734)		Float dx = (v->x - this1->x);
HXDLIN( 734)		Float dy = (v->y - this1->y);
HXDLIN( 734)		if (v->_weak) {
HXDLIN( 734)			v->put();
            		}
HXDLIN( 734)		return ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,dist,return )

Float FlxVector_Impl__obj::distSquared( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint v){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_741_distSquared)
HXLINE( 742)		Float dx = (v->x - this1->x);
HXLINE( 743)		Float dy = (v->y - this1->y);
HXLINE( 744)		if (v->_weak) {
HXLINE( 744)			v->put();
            		}
HXLINE( 745)		return ((dx * dx) + (dy * dy));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,distSquared,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::bounce( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint normal,hx::Null< Float >  __o_bounceCoeff){
Float bounceCoeff = __o_bounceCoeff.Default(1);
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_756_bounce)
HXLINE( 757)		Float d = (this1->x * normal->x);
HXDLIN( 757)		Float d1 = (((int)1 + bounceCoeff) * (d + (this1->y * normal->y)));
HXLINE( 758)		{
HXLINE( 758)			 ::flixel::math::FlxPoint _g = this1;
HXDLIN( 758)			{
HXLINE( 758)				Float _g1 = _g->x;
HXDLIN( 758)				_g->set_x((_g1 - (d1 * normal->x)));
            			}
            		}
HXLINE( 759)		{
HXLINE( 759)			 ::flixel::math::FlxPoint _g2 = this1;
HXDLIN( 759)			{
HXLINE( 759)				Float _g3 = _g2->y;
HXDLIN( 759)				_g2->set_y((_g3 - (d1 * normal->y)));
            			}
            		}
HXLINE( 760)		if (normal->_weak) {
HXLINE( 760)			normal->put();
            		}
HXLINE( 761)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxVector_Impl__obj,bounce,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::bounceWithFriction( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint normal,hx::Null< Float >  __o_bounceCoeff,hx::Null< Float >  __o_friction){
Float bounceCoeff = __o_bounceCoeff.Default(1);
Float friction = __o_friction.Default(0);
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_773_bounceWithFriction)
HXLINE( 774)		 ::flixel::math::FlxPoint v = ::flixel::math::_FlxVector::FlxVector_Impl__obj::rightNormal(normal,::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector3);
HXDLIN( 774)		 ::flixel::math::FlxPoint proj = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector1;
HXDLIN( 774)		Float dp = (this1->x * v->x);
HXDLIN( 774)		Float dp1 = (dp + (this1->y * v->y));
HXDLIN( 774)		if (hx::IsNull( proj )) {
HXLINE( 774)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 774)			point->_inPool = false;
HXDLIN( 774)			proj = point;
            		}
HXDLIN( 774)		 ::flixel::math::FlxPoint p1 = proj->set((dp1 * v->x),(dp1 * v->y));
HXLINE( 775)		 ::flixel::math::FlxPoint proj1 = ::flixel::math::_FlxVector::FlxVector_Impl__obj::_vector2;
HXDLIN( 775)		Float dp2 = (this1->x * normal->x);
HXDLIN( 775)		Float dp3 = (dp2 + (this1->y * normal->y));
HXDLIN( 775)		if (hx::IsNull( proj1 )) {
HXLINE( 775)			 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 775)			point1->_inPool = false;
HXDLIN( 775)			proj1 = point1;
            		}
HXDLIN( 775)		 ::flixel::math::FlxPoint p2 = proj1->set((dp3 * normal->x),(dp3 * normal->y));
HXLINE( 776)		Float bounceX = -(p2->x);
HXLINE( 777)		Float bounceY = -(p2->y);
HXLINE( 778)		Float frictionX = p1->x;
HXLINE( 779)		Float frictionY = p1->y;
HXLINE( 780)		this1->set_x(((bounceX * bounceCoeff) + (frictionX * friction)));
HXLINE( 781)		this1->set_y(((bounceY * bounceCoeff) + (frictionY * friction)));
HXLINE( 782)		if (normal->_weak) {
HXLINE( 782)			normal->put();
            		}
HXLINE( 783)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxVector_Impl__obj,bounceWithFriction,return )

bool FlxVector_Impl__obj::isValid( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_793_isValid)
HXDLIN( 793)		bool _hx_tmp;
HXDLIN( 793)		bool _hx_tmp1;
HXDLIN( 793)		if (!(::Math_obj::isNaN(this1->x))) {
HXDLIN( 793)			_hx_tmp1 = !(::Math_obj::isNaN(this1->y));
            		}
            		else {
HXDLIN( 793)			_hx_tmp1 = false;
            		}
HXDLIN( 793)		if (_hx_tmp1) {
HXDLIN( 793)			_hx_tmp = ::Math_obj::isFinite(this1->x);
            		}
            		else {
HXDLIN( 793)			_hx_tmp = false;
            		}
HXDLIN( 793)		if (_hx_tmp) {
HXDLIN( 793)			return ::Math_obj::isFinite(this1->y);
            		}
            		else {
HXDLIN( 793)			return false;
            		}
HXDLIN( 793)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,isValid,return )

 ::flixel::math::FlxPoint FlxVector_Impl__obj::clone( ::flixel::math::FlxPoint this1, ::flixel::math::FlxPoint vec){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_803_clone)
HXLINE( 804)		if (hx::IsNull( vec )) {
HXLINE( 806)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 806)			point->_inPool = false;
HXDLIN( 806)			vec = point;
            		}
HXLINE( 809)		vec->set_x(this1->x);
HXLINE( 810)		vec->set_y(this1->y);
HXLINE( 811)		return vec;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,clone,return )

Float FlxVector_Impl__obj::get_x( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_816_get_x)
HXDLIN( 816)		return this1->x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_x,return )

Float FlxVector_Impl__obj::set_x( ::flixel::math::FlxPoint this1,Float x){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_821_set_x)
HXDLIN( 821)		return this1->set_x(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,set_x,return )

Float FlxVector_Impl__obj::get_y( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_826_get_y)
HXDLIN( 826)		return this1->y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_y,return )

Float FlxVector_Impl__obj::set_y( ::flixel::math::FlxPoint this1,Float y){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_831_set_y)
HXDLIN( 831)		return this1->set_y(y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,set_y,return )

Float FlxVector_Impl__obj::get_dx( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_835_get_dx)
HXLINE( 836)		bool _hx_tmp;
HXDLIN( 836)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE( 836)			_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 836)			_hx_tmp = false;
            		}
HXDLIN( 836)		if (_hx_tmp) {
HXLINE( 837)			return (int)0;
            		}
HXLINE( 839)		Float this2 = this1->x;
HXDLIN( 839)		Float _hx_tmp1 = (this1->x * this1->x);
HXDLIN( 839)		return ((Float)this2 / (Float)::Math_obj::sqrt((_hx_tmp1 + (this1->y * this1->y))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_dx,return )

Float FlxVector_Impl__obj::get_dy( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_843_get_dy)
HXLINE( 844)		bool _hx_tmp;
HXDLIN( 844)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE( 844)			_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 844)			_hx_tmp = false;
            		}
HXDLIN( 844)		if (_hx_tmp) {
HXLINE( 845)			return (int)0;
            		}
HXLINE( 847)		Float this2 = this1->y;
HXDLIN( 847)		Float _hx_tmp1 = (this1->x * this1->x);
HXDLIN( 847)		return ((Float)this2 / (Float)::Math_obj::sqrt((_hx_tmp1 + (this1->y * this1->y))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_dy,return )

Float FlxVector_Impl__obj::get_length( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_852_get_length)
HXDLIN( 852)		Float _hx_tmp = (this1->x * this1->x);
HXDLIN( 852)		return ::Math_obj::sqrt((_hx_tmp + (this1->y * this1->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_length,return )

Float FlxVector_Impl__obj::set_length( ::flixel::math::FlxPoint this1,Float l){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_856_set_length)
HXLINE( 857)		bool _hx_tmp;
HXDLIN( 857)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE( 857)			_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 857)			_hx_tmp = false;
            		}
HXDLIN( 857)		if (!(_hx_tmp)) {
HXLINE( 859)			Float a = ::flixel::math::_FlxVector::FlxVector_Impl__obj::get_radians(this1);
HXLINE( 860)			this1->set_x((l * ::Math_obj::cos(a)));
HXLINE( 861)			this1->set_y((l * ::Math_obj::sin(a)));
            		}
HXLINE( 863)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,set_length,return )

Float FlxVector_Impl__obj::get_lengthSquared( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_868_get_lengthSquared)
HXDLIN( 868)		Float _hx_tmp = (this1->x * this1->x);
HXDLIN( 868)		return (_hx_tmp + (this1->y * this1->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_lengthSquared,return )

Float FlxVector_Impl__obj::get_degrees( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_873_get_degrees)
HXDLIN( 873)		Float _hx_tmp = ::flixel::math::_FlxVector::FlxVector_Impl__obj::get_radians(this1);
HXDLIN( 873)		return (_hx_tmp * ((Float)(int)180 / (Float)::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_degrees,return )

Float FlxVector_Impl__obj::set_degrees( ::flixel::math::FlxPoint this1,Float degs){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_877_set_degrees)
HXLINE( 878)		{
HXLINE( 878)			Float rads = (degs * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 878)			Float len = (this1->x * this1->x);
HXDLIN( 878)			Float len1 = ::Math_obj::sqrt((len + (this1->y * this1->y)));
HXDLIN( 878)			this1->set_x((len1 * ::Math_obj::cos(rads)));
HXDLIN( 878)			this1->set_y((len1 * ::Math_obj::sin(rads)));
            		}
HXLINE( 879)		return degs;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,set_degrees,return )

Float FlxVector_Impl__obj::get_radians( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_883_get_radians)
HXLINE( 884)		bool _hx_tmp;
HXDLIN( 884)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE( 884)			_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 884)			_hx_tmp = false;
            		}
HXDLIN( 884)		if (_hx_tmp) {
HXLINE( 885)			return (int)0;
            		}
HXLINE( 887)		return ::Math_obj::atan2(this1->y,this1->x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_radians,return )

Float FlxVector_Impl__obj::set_radians( ::flixel::math::FlxPoint this1,Float rads){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_891_set_radians)
HXLINE( 892)		Float len = (this1->x * this1->x);
HXDLIN( 892)		Float len1 = ::Math_obj::sqrt((len + (this1->y * this1->y)));
HXLINE( 894)		this1->set_x((len1 * ::Math_obj::cos(rads)));
HXLINE( 895)		this1->set_y((len1 * ::Math_obj::sin(rads)));
HXLINE( 896)		return rads;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_Impl__obj,set_radians,return )

Float FlxVector_Impl__obj::get_rx( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_901_get_rx)
HXDLIN( 901)		return -(this1->y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_rx,return )

Float FlxVector_Impl__obj::get_ry( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_906_get_ry)
HXDLIN( 906)		return this1->x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_ry,return )

Float FlxVector_Impl__obj::get_lx( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_911_get_lx)
HXDLIN( 911)		return this1->y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_lx,return )

Float FlxVector_Impl__obj::get_ly( ::flixel::math::FlxPoint this1){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_916_get_ly)
HXDLIN( 916)		return -(this1->x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxVector_Impl__obj,get_ly,return )

::Dynamic FlxVector_Impl__obj::get_pool(){
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_921_get_pool)
HXDLIN( 921)		return ::flixel::math::FlxPoint_obj::get_pool();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxVector_Impl__obj,get_pool,return )


FlxVector_Impl__obj::FlxVector_Impl__obj()
{
}

bool FlxVector_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"weak") ) { outValue = weak_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ceil") ) { outValue = ceil_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zero") ) { outValue = zero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sign") ) { outValue = sign_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dist") ) { outValue = dist_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floor") ) { outValue = floor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ratio") ) { outValue = ratio_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_x") ) { outValue = get_x_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_x") ) { outValue = set_x_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_y") ) { outValue = get_y_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_y") ) { outValue = set_y_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"addNew") ) { outValue = addNew_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isZero") ) { outValue = isZero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bounce") ) { outValue = bounce_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_dx") ) { outValue = get_dx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_dy") ) { outValue = get_dy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_rx") ) { outValue = get_rx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_ry") ) { outValue = get_ry_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lx") ) { outValue = get_lx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_ly") ) { outValue = get_ly_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isValid") ) { outValue = isValid_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addPoint") ) { outValue = addPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleNew") ) { outValue = scaleNew_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { outValue = copyFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"truncate") ) { outValue = truncate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_pool") ) { outValue = get_pool_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { outValue = transform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negateNew") ) { outValue = negateNew_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"projectTo") ) { outValue = projectTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ratioWeak") ) { outValue = ratioWeak_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dotProduct") ) { outValue = dotProduct_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isParallel") ) { outValue = isParallel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"leftNormal") ) { outValue = leftNormal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_length") ) { outValue = set_length_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"subtractNew") ) { outValue = subtractNew_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rightNormal") ) { outValue = rightNormal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"perpProduct") ) { outValue = perpProduct_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"distSquared") ) { outValue = distSquared_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_degrees") ) { outValue = get_degrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_degrees") ) { outValue = set_degrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_radians") ) { outValue = get_radians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_radians") ) { outValue = set_radians_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isNormalized") ) { outValue = isNormalized_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"subtractPoint") ) { outValue = subtractPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyFromFlash") ) { outValue = copyFromFlash_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dotProductWeak") ) { outValue = dotProductWeak_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isParallelWeak") ) { outValue = isParallelWeak_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotateWithTrig") ) { outValue = rotateWithTrig_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"radiansBetween") ) { outValue = radiansBetween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"degreesBetween") ) { outValue = degreesBetween_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isPerpendicular") ) { outValue = isPerpendicular_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotateByRadians") ) { outValue = rotateByRadians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotateByDegrees") ) { outValue = rotateByDegrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"perpProductWeak") ) { outValue = perpProductWeak_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"findIntersection") ) { outValue = findIntersection_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_lengthSquared") ) { outValue = get_lengthSquared_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"crossProductLength") ) { outValue = crossProductLength_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bounceWithFriction") ) { outValue = bounceWithFriction_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"projectToNormalized") ) { outValue = projectToNormalized_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"dotProdWithNormalizing") ) { outValue = dotProdWithNormalizing_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"crossProductLengthWeak") ) { outValue = crossProductLengthWeak_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"projectToNormalizedWeak") ) { outValue = projectToNormalizedWeak_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"findIntersectionInBounds") ) { outValue = findIntersectionInBounds_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxVector_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo FlxVector_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &FlxVector_Impl__obj::EPSILON,HX_HCSTRING("EPSILON","\x4a","\x89","\x92","\x2c")},
	{hx::fsFloat,(void *) &FlxVector_Impl__obj::EPSILON_SQUARED,HX_HCSTRING("EPSILON_SQUARED","\xd2","\x99","\xe6","\x6d")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(void *) &FlxVector_Impl__obj::_vector1,HX_HCSTRING("_vector1","\x8f","\x53","\x55","\x14")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(void *) &FlxVector_Impl__obj::_vector2,HX_HCSTRING("_vector2","\x90","\x53","\x55","\x14")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(void *) &FlxVector_Impl__obj::_vector3,HX_HCSTRING("_vector3","\x91","\x53","\x55","\x14")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void FlxVector_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxVector_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxVector_Impl__obj::EPSILON,"EPSILON");
	HX_MARK_MEMBER_NAME(FlxVector_Impl__obj::EPSILON_SQUARED,"EPSILON_SQUARED");
	HX_MARK_MEMBER_NAME(FlxVector_Impl__obj::_vector1,"_vector1");
	HX_MARK_MEMBER_NAME(FlxVector_Impl__obj::_vector2,"_vector2");
	HX_MARK_MEMBER_NAME(FlxVector_Impl__obj::_vector3,"_vector3");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxVector_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxVector_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxVector_Impl__obj::EPSILON,"EPSILON");
	HX_VISIT_MEMBER_NAME(FlxVector_Impl__obj::EPSILON_SQUARED,"EPSILON_SQUARED");
	HX_VISIT_MEMBER_NAME(FlxVector_Impl__obj::_vector1,"_vector1");
	HX_VISIT_MEMBER_NAME(FlxVector_Impl__obj::_vector2,"_vector2");
	HX_VISIT_MEMBER_NAME(FlxVector_Impl__obj::_vector3,"_vector3");
};

#endif

hx::Class FlxVector_Impl__obj::__mClass;

static ::String FlxVector_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("EPSILON","\x4a","\x89","\x92","\x2c"),
	HX_HCSTRING("EPSILON_SQUARED","\xd2","\x99","\xe6","\x6d"),
	HX_HCSTRING("_vector1","\x8f","\x53","\x55","\x14"),
	HX_HCSTRING("_vector2","\x90","\x53","\x55","\x14"),
	HX_HCSTRING("_vector3","\x91","\x53","\x55","\x14"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("weak","\x78","\x5c","\xf5","\x4e"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addPoint","\x6f","\xda","\xec","\x3f"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("subtractPoint","\x9c","\xc6","\x66","\x44"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("scaleNew","\xf6","\xeb","\x58","\x01"),
	HX_HCSTRING("addNew","\xbf","\xe0","\x04","\x9f"),
	HX_HCSTRING("subtractNew","\xac","\x77","\xf9","\x0b"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyFromFlash","\x71","\xa5","\xda","\x18"),
	HX_HCSTRING("floor","\xcc","\xd1","\x96","\x02"),
	HX_HCSTRING("ceil","\x05","\x1f","\xbd","\x41"),
	HX_HCSTRING("round","\x4e","\xf8","\x65","\xed"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("dotProduct","\xa6","\x27","\xf0","\x3d"),
	HX_HCSTRING("dotProductWeak","\x3e","\x7b","\xe2","\x64"),
	HX_HCSTRING("dotProdWithNormalizing","\xc4","\xc2","\x75","\x68"),
	HX_HCSTRING("isPerpendicular","\x60","\x10","\x79","\x24"),
	HX_HCSTRING("crossProductLength","\xd5","\x45","\x1a","\x6f"),
	HX_HCSTRING("crossProductLengthWeak","\xed","\xdc","\x48","\x88"),
	HX_HCSTRING("isParallel","\xd1","\xbc","\xa5","\xf8"),
	HX_HCSTRING("isParallelWeak","\xe9","\x81","\xc1","\x94"),
	HX_HCSTRING("isZero","\x32","\xd4","\x57","\x6e"),
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("isNormalized","\xc1","\x8c","\x8e","\x53"),
	HX_HCSTRING("rotateByRadians","\x80","\x07","\x76","\xe7"),
	HX_HCSTRING("rotateByDegrees","\xb5","\xa4","\xe0","\xfa"),
	HX_HCSTRING("rotateWithTrig","\x7d","\x0f","\x08","\xe3"),
	HX_HCSTRING("rightNormal","\x23","\x3f","\xee","\x99"),
	HX_HCSTRING("leftNormal","\x8e","\x2d","\x7a","\x5f"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("negateNew","\xbe","\x4b","\xdc","\xc5"),
	HX_HCSTRING("projectTo","\xb4","\x84","\xf8","\x94"),
	HX_HCSTRING("projectToNormalized","\x0b","\x56","\xc9","\x3e"),
	HX_HCSTRING("projectToNormalizedWeak","\x23","\x40","\x63","\xdc"),
	HX_HCSTRING("perpProduct","\x7c","\xfe","\x93","\xf3"),
	HX_HCSTRING("perpProductWeak","\x14","\x75","\xe9","\x1f"),
	HX_HCSTRING("ratio","\x0b","\x35","\x24","\xe4"),
	HX_HCSTRING("ratioWeak","\x23","\x9f","\x19","\x92"),
	HX_HCSTRING("findIntersection","\x22","\xb0","\x83","\xae"),
	HX_HCSTRING("findIntersectionInBounds","\x7c","\x2e","\x11","\x2e"),
	HX_HCSTRING("truncate","\x66","\xbe","\xf9","\xce"),
	HX_HCSTRING("radiansBetween","\x76","\x05","\xc0","\x0e"),
	HX_HCSTRING("degreesBetween","\xe1","\xa8","\x04","\x64"),
	HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c"),
	HX_HCSTRING("dist","\x66","\x67","\x69","\x42"),
	HX_HCSTRING("distSquared","\x61","\xa2","\xda","\x2a"),
	HX_HCSTRING("bounce","\x88","\x85","\x1d","\x66"),
	HX_HCSTRING("bounceWithFriction","\xc8","\x1e","\xa8","\x25"),
	HX_HCSTRING("isValid","\xb2","\x18","\x3e","\xce"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_dx","\xdd","\xee","\x2f","\xa3"),
	HX_HCSTRING("get_dy","\xde","\xee","\x2f","\xa3"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("set_length","\x23","\xa3","\x0c","\x93"),
	HX_HCSTRING("get_lengthSquared","\x38","\x30","\xb5","\x3b"),
	HX_HCSTRING("get_degrees","\xbe","\x43","\x55","\xc0"),
	HX_HCSTRING("set_degrees","\xca","\x4a","\xc2","\xca"),
	HX_HCSTRING("get_radians","\x89","\xa6","\xea","\xac"),
	HX_HCSTRING("set_radians","\x95","\xad","\x57","\xb7"),
	HX_HCSTRING("get_rx","\x0f","\xfb","\x2f","\xa3"),
	HX_HCSTRING("get_ry","\x10","\xfb","\x2f","\xa3"),
	HX_HCSTRING("get_lx","\xd5","\xf5","\x2f","\xa3"),
	HX_HCSTRING("get_ly","\xd6","\xf5","\x2f","\xa3"),
	HX_HCSTRING("get_pool","\x65","\x3c","\x17","\xca"),
	::String(null())
};

void FlxVector_Impl__obj::__register()
{
	hx::Object *dummy = new FlxVector_Impl__obj;
	FlxVector_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.math._FlxVector.FlxVector_Impl_","\xf1","\x01","\xb9","\x6e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxVector_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxVector_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxVector_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FlxVector_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxVector_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxVector_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxVector_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxVector_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_12_boot)
HXDLIN(  12)		EPSILON = ((Float)0.0000001);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_13_boot)
HXDLIN(  13)		EPSILON_SQUARED = ((Float)9.9999999999999984e-015);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_5cc336e8df399df1_15_boot)
HXDLIN(  15)			 ::flixel::math::FlxPoint this1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXDLIN(  15)			return this1;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_15_boot)
HXDLIN(  15)		_vector1 =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_5cc336e8df399df1_16_boot)
HXDLIN(  16)			 ::flixel::math::FlxPoint this1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXDLIN(  16)			return this1;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_16_boot)
HXDLIN(  16)		_vector2 =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_5cc336e8df399df1_17_boot)
HXDLIN(  17)			 ::flixel::math::FlxPoint this1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXDLIN(  17)			return this1;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_5cc336e8df399df1_17_boot)
HXDLIN(  17)		_vector3 =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace flixel
} // end namespace math
} // end namespace _FlxVector
