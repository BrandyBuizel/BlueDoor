// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_CredState
#include <CredState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_WatchFrontEnd
#include <flixel/system/frontEnds/WatchFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1f119275e66a7b90_39_new,"MenuState","new",0xe563b1c4,"MenuState.new","MenuState.hx",39,0xdfbcb22c)
static const ::String _hx_array_data_c0b6bfd2_1[] = {
	HX_("Ken",74,41,39,00),HX_("Dylan",c4,8b,8c,77),HX_("Dustin",f7,52,82,da),
};
static const ::String _hx_array_data_c0b6bfd2_2[] = {
	HX_("Play",14,5a,33,35),HX_("Select Character",85,c1,b7,c0),HX_("Credits",fa,35,af,e0),HX_("Exit",3e,23,f7,2d),
};
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_63_create,"MenuState","create",0xe57b7c18,"MenuState.create","MenuState.hx",63,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_70_initText,"MenuState","initText",0xfe218ff9,"MenuState.initText","MenuState.hx",70,0xdfbcb22c)
static const int _hx_array_data_c0b6bfd2_6[] = {
	(int)0,
};
static const int _hx_array_data_c0b6bfd2_7[] = {
	(int)1,(int)1,(int)1,(int)0,
};
static const int _hx_array_data_c0b6bfd2_8[] = {
	(int)0,
};
static const int _hx_array_data_c0b6bfd2_9[] = {
	(int)1,(int)1,(int)1,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_114_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",114,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_121_menuHandling,"MenuState","menuHandling",0x9ef231c0,"MenuState.menuHandling","MenuState.hx",121,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_175_menuOpen,"MenuState","menuOpen",0xfc93c525,"MenuState.menuOpen","MenuState.hx",175,0xdfbcb22c)

void MenuState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_39_new)
HXLINE(  57)		this->selMax = (int)0;
HXLINE(  55)		this->curMenu = (int)0;
HXLINE(  53)		this->charSelect = (int)0;
HXLINE(  52)		this->selected = (int)0;
HXLINE(  50)		this->charItems = ::Array_obj< ::String >::fromData( _hx_array_data_c0b6bfd2_1,3);
HXLINE(  47)		this->menuItems = ::Array_obj< ::String >::fromData( _hx_array_data_c0b6bfd2_2,4);
HXLINE(  39)		super::__construct(MaxSize);
            	}

Dynamic MenuState_obj::__CreateEmpty() { return new MenuState_obj; }

void *MenuState_obj::_hx_vtable = 0;

Dynamic MenuState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MenuState_obj > _hx_result = new MenuState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x17fb3926) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17fb3926;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void MenuState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_63_create)
HXLINE(  64)		this->initText();
HXLINE(  66)		this->super::create();
            	}


void MenuState_obj::initText(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_70_initText)
HXLINE(  71)		this->_grpMenuBar =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  72)		this->add(this->_grpMenuBar);
HXLINE(  74)		this->selector =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)315,null());
HXLINE(  75)		this->selector->makeGraphic(::flixel::FlxG_obj::width,(int)36,(int)-65281,null(),null());
HXLINE(  77)		this->_grpMenu =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  78)		this->add(this->_grpMenu);
HXLINE(  80)		this->selMax = (this->menuItems->length - (int)1);
HXLINE(  82)		{
HXLINE(  82)			int _g1 = (int)0;
HXDLIN(  82)			int _g = this->menuItems->length;
HXDLIN(  82)			while((_g1 < _g)){
HXLINE(  82)				_g1 = (_g1 + (int)1);
HXDLIN(  82)				int i = (_g1 - (int)1);
HXLINE(  83)				 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,((int)180 + (i * (int)60)),(int)0,this->menuItems->__get(i),(int)32,null());
HXLINE(  84)				text->set_color((int)-1);
HXLINE(  85)				text->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  86)				this->_grpMenu->add(text).StaticCast<  ::flixel::text::FlxText >();
            			}
            		}
HXLINE(  90)		Float _hx_tmp = (Dynamic( this->_grpMenu->members->__get((int)1)).StaticCast<  ::flixel::text::FlxText >()->x - (int)42);
HXDLIN(  90)		this->_selArrowL =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp,(Dynamic( this->_grpMenu->members->__get((int)1)).StaticCast<  ::flixel::text::FlxText >()->y + (int)6),null());
HXLINE(  91)		this->_selArrowL->loadGraphic(HX_("assets/images/spr_selectArrow.png",d3,b5,44,c8),true,(int)6,(int)9,null(),null());
HXLINE(  92)		this->_selArrowL->setGraphicSize((int)15,null());
HXLINE(  93)		this->_selArrowL->updateHitbox();
HXLINE(  94)		::flixel::tweens::FlxTween_obj::tween(this->_selArrowL, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("x",78,00,00,00),(this->_selArrowL->x + (int)10))),((Float)0.2), ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.225))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            			->setFixed(2,HX_("type",ba,f2,08,4d),(int)4)));
HXLINE(  95)		this->add(this->_selArrowL);
HXLINE(  97)		this->_selArrowL->animation->add(HX_("normal",27,72,69,30),::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_6,1),null(),null(),null(),null());
HXLINE(  98)		this->_selArrowL->animation->add(HX_("yellow",74,9f,5c,d0),::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_7,4),(int)16,false,null(),null());
HXLINE( 101)		Float _hx_tmp1 = (Dynamic( this->_grpMenu->members->__get((int)1)).StaticCast<  ::flixel::text::FlxText >()->x + (int)340);
HXDLIN( 101)		this->_selArrowR =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp1,(Dynamic( this->_grpMenu->members->__get((int)1)).StaticCast<  ::flixel::text::FlxText >()->y + (int)8),null());
HXLINE( 102)		this->_selArrowR->loadGraphic(HX_("assets/images/spr_selectArrow.png",d3,b5,44,c8),true,(int)6,(int)9,null(),null());
HXLINE( 103)		this->_selArrowR->setGraphicSize((int)15,null());
HXLINE( 104)		this->_selArrowR->set_flipX(true);
HXLINE( 105)		this->_selArrowR->updateHitbox();
HXLINE( 106)		::flixel::tweens::FlxTween_obj::tween(this->_selArrowR, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("x",78,00,00,00),(this->_selArrowR->x + (int)10))),((Float)0.2), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            			->setFixed(1,HX_("type",ba,f2,08,4d),(int)4)));
HXLINE( 107)		this->add(this->_selArrowR);
HXLINE( 109)		this->_selArrowR->animation->add(HX_("normal",27,72,69,30),::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_8,1),null(),null(),null(),null());
HXLINE( 110)		this->_selArrowR->animation->add(HX_("yellow",74,9f,5c,d0),::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_9,4),(int)16,false,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,initText,(void))

void MenuState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_114_update)
HXLINE( 115)		this->menuHandling();
HXLINE( 117)		this->super::update(elapsed);
            	}


void MenuState_obj::menuHandling(){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_121_menuHandling)
HXLINE( 123)		{
HXLINE( 123)			int _g1 = (int)0;
HXDLIN( 123)			int _g = this->_grpMenu->members->get_length();
HXDLIN( 123)			while((_g1 < _g)){
HXLINE( 123)				_g1 = (_g1 + (int)1);
HXDLIN( 123)				int i = (_g1 - (int)1);
HXLINE( 124)				Dynamic( this->_grpMenu->members->__get(i)).StaticCast<  ::flixel::text::FlxText >()->set_color((int)-1);
            			}
            		}
HXLINE( 127)		Dynamic( this->_grpMenu->members->__get(this->selected)).StaticCast<  ::flixel::text::FlxText >()->set_color((int)-256);
HXLINE( 130)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 130)		int KeyArray;
HXDLIN( 130)		::String s = HX_("W",57,00,00,00);
HXDLIN( 130)		s = s.toUpperCase();
HXDLIN( 130)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 130)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE( 130)			KeyArray = (int)-1;
            		}
HXDLIN( 130)		::String s1 = HX_("UP",5b,4a,00,00);
HXDLIN( 130)		s1 = s1.toUpperCase();
HXDLIN( 130)		int KeyArray1;
HXDLIN( 130)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 130)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXLINE( 130)			KeyArray1 = (int)-1;
            		}
HXDLIN( 130)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray)->init(1,KeyArray1),(int)2)) {
HXLINE( 131)			 ::MenuState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 131)			_hx_tmp->selected = (_hx_tmp->selected - (int)1);
HXLINE( 133)			::flixel::FlxG_obj::sound->play(HX_("assets/sounds/menuUp.mp3",bb,c9,48,d2),null(),null(),null(),null(),null());
HXLINE( 134)			::flixel::FlxG_obj::sound->play(HX_("assets/sounds/menuUp.ogg",9a,46,4a,d2),null(),null(),null(),null(),null());
            		}
HXLINE( 137)		 ::flixel::input::keyboard::FlxKeyboard _this1 = ::flixel::FlxG_obj::keys;
HXDLIN( 137)		int KeyArray2;
HXDLIN( 137)		::String s2 = HX_("S",53,00,00,00);
HXDLIN( 137)		s2 = s2.toUpperCase();
HXDLIN( 137)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE( 137)			KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            		}
            		else {
HXLINE( 137)			KeyArray2 = (int)-1;
            		}
HXDLIN( 137)		::String s3 = HX_("DOWN",62,c0,2e,2d);
HXDLIN( 137)		s3 = s3.toUpperCase();
HXDLIN( 137)		int KeyArray3;
HXDLIN( 137)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) {
HXLINE( 137)			KeyArray3 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) );
            		}
            		else {
HXLINE( 137)			KeyArray3 = (int)-1;
            		}
HXDLIN( 137)		if (_this1->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray2)->init(1,KeyArray3),(int)2)) {
HXLINE( 138)			 ::MenuState _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 138)			_hx_tmp1->selected = (_hx_tmp1->selected + (int)1);
HXLINE( 139)			::flixel::FlxG_obj::sound->play(HX_("assets/sounds/menuDown.mp3",c2,1e,6c,2f),null(),null(),null(),null(),null());
HXLINE( 140)			::flixel::FlxG_obj::sound->play(HX_("assets/sounds/menuDown.ogg",a1,9b,6d,2f),null(),null(),null(),null(),null());
            		}
HXLINE( 143)		if ((this->selected == (int)1)) {
HXLINE( 144)			 ::flixel::input::keyboard::FlxKeyboard _this2 = ::flixel::FlxG_obj::keys;
HXDLIN( 144)			int KeyArray4;
HXDLIN( 144)			::String s4 = HX_("A",41,00,00,00);
HXDLIN( 144)			s4 = s4.toUpperCase();
HXDLIN( 144)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s4)) {
HXLINE( 144)				KeyArray4 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s4)) );
            			}
            			else {
HXLINE( 144)				KeyArray4 = (int)-1;
            			}
HXDLIN( 144)			::String s5 = HX_("LEFT",07,d0,70,32);
HXDLIN( 144)			s5 = s5.toUpperCase();
HXDLIN( 144)			int KeyArray5;
HXDLIN( 144)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s5)) {
HXLINE( 144)				KeyArray5 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s5)) );
            			}
            			else {
HXLINE( 144)				KeyArray5 = (int)-1;
            			}
HXDLIN( 144)			if (_this2->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray4)->init(1,KeyArray5),(int)2)) {
HXLINE( 145)				 ::MenuState _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 145)				_hx_tmp2->charSelect = (_hx_tmp2->charSelect - (int)1);
HXLINE( 146)				this->_selArrowL->animation->play(HX_("yellow",74,9f,5c,d0),null(),null(),null());
HXLINE( 147)				::flixel::FlxG_obj::sound->play(HX_("assets/sounds/menuConfirm.mp3",64,ce,d3,b3),null(),null(),null(),null(),null());
HXLINE( 148)				::flixel::FlxG_obj::sound->play(HX_("assets/sounds/menuConfirm.ogg",43,4b,d5,b3),null(),null(),null(),null(),null());
            			}
HXLINE( 151)			 ::flixel::input::keyboard::FlxKeyboard _this3 = ::flixel::FlxG_obj::keys;
HXDLIN( 151)			int KeyArray6;
HXDLIN( 151)			::String s6 = HX_("D",44,00,00,00);
HXDLIN( 151)			s6 = s6.toUpperCase();
HXDLIN( 151)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s6)) {
HXLINE( 151)				KeyArray6 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s6)) );
            			}
            			else {
HXLINE( 151)				KeyArray6 = (int)-1;
            			}
HXDLIN( 151)			::String s7 = HX_("RIGHT",bc,43,52,67);
HXDLIN( 151)			s7 = s7.toUpperCase();
HXDLIN( 151)			int KeyArray7;
HXDLIN( 151)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s7)) {
HXLINE( 151)				KeyArray7 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s7)) );
            			}
            			else {
HXLINE( 151)				KeyArray7 = (int)-1;
            			}
HXDLIN( 151)			if (_this3->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray6)->init(1,KeyArray7),(int)2)) {
HXLINE( 152)				 ::MenuState _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 152)				_hx_tmp3->charSelect = (_hx_tmp3->charSelect + (int)1);
HXLINE( 153)				this->_selArrowR->animation->play(HX_("yellow",74,9f,5c,d0),null(),null(),null());
HXLINE( 154)				::flixel::FlxG_obj::sound->play(HX_("assets/sounds/menuConfirm.mp3",64,ce,d3,b3),null(),null(),null(),null(),null());
HXLINE( 155)				::flixel::FlxG_obj::sound->play(HX_("assets/sounds/menuConfirm.ogg",43,4b,d5,b3),null(),null(),null(),null(),null());
            			}
            		}
HXLINE( 159)		bool _hx_tmp4;
HXDLIN( 159)		 ::flixel::input::keyboard::FlxKeyboard _this4 = ::flixel::FlxG_obj::keys;
HXDLIN( 159)		int KeyArray8;
HXDLIN( 159)		::String s8 = HX_("ENTER",f8,a4,74,ee);
HXDLIN( 159)		s8 = s8.toUpperCase();
HXDLIN( 159)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s8)) {
HXLINE( 159)			KeyArray8 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s8)) );
            		}
            		else {
HXLINE( 159)			KeyArray8 = (int)-1;
            		}
HXDLIN( 159)		int KeyArray9;
HXDLIN( 159)		::String s9 = HX_("Z",5a,00,00,00);
HXDLIN( 159)		s9 = s9.toUpperCase();
HXDLIN( 159)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s9)) {
HXLINE( 159)			KeyArray9 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s9)) );
            		}
            		else {
HXLINE( 159)			KeyArray9 = (int)-1;
            		}
HXDLIN( 159)		::String s10 = HX_("SPACE",a6,c4,54,ff);
HXDLIN( 159)		s10 = s10.toUpperCase();
HXDLIN( 159)		int KeyArray10;
HXDLIN( 159)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s10)) {
HXLINE( 159)			KeyArray10 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s10)) );
            		}
            		else {
HXLINE( 159)			KeyArray10 = (int)-1;
            		}
HXDLIN( 159)		if (_this4->checkKeyArrayState(::Array_obj< int >::__new(3)->init(0,KeyArray8)->init(1,KeyArray9)->init(2,KeyArray10),(int)2)) {
HXLINE( 159)			if ((this->selected != (int)0)) {
HXLINE( 159)				_hx_tmp4 = (this->selected == (int)2);
            			}
            			else {
HXLINE( 159)				_hx_tmp4 = true;
            			}
            		}
            		else {
HXLINE( 159)			_hx_tmp4 = false;
            		}
HXDLIN( 159)		if (_hx_tmp4) {
HXLINE( 160)			this->menuOpen(this->menuItems->__get(this->selected));
            		}
HXLINE( 164)		{
HXLINE( 164)			 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this5 = ::flixel::FlxG_obj::watch;
HXDLIN( 164)			 ::Dynamic value = this->selected;
            		}
HXLINE( 166)		int _hx_tmp5 = this->selected;
HXDLIN( 166)		if ((_hx_tmp5 > (this->_grpMenu->members->get_length() - (int)1))) {
HXLINE( 167)			this->selected = (int)0;
            		}
HXLINE( 168)		if ((this->selected < (int)0)) {
HXLINE( 169)			this->selected = (this->_grpMenu->members->get_length() - (int)1);
            		}
HXLINE( 171)		{
HXLINE( 171)			 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this6 = ::flixel::FlxG_obj::watch;
HXDLIN( 171)			 ::Dynamic value1 = this->selected;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,menuHandling,(void))

void MenuState_obj::menuOpen(::String menuSelected){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_175_menuOpen)
HXLINE( 176)		 ::flixel::_hx_system::FlxSound sound =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXLINE( 177)		sound->persist = true;
HXLINE( 178)		sound->loadEmbedded(HX_("assets/sounds/menuConfirm.mp3",64,ce,d3,b3),false,true,null());
HXLINE( 179)		sound->loadEmbedded(HX_("assets/sounds/menuConfirm.ogg",43,4b,d5,b3),false,true,null());
HXLINE( 180)		sound->set_group(::flixel::FlxG_obj::sound->defaultSoundGroup);
HXLINE( 181)		sound->play(null(),null(),null());
HXLINE( 183)		::String _hx_switch_0 = menuSelected;
            		if (  (_hx_switch_0==HX_("Credits",fa,35,af,e0)) ){
HXLINE( 187)			 ::flixel::FlxState nextState =  ::CredState_obj::__alloc( HX_CTX ,null());
HXDLIN( 187)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 187)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 187)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==HX_("Play",14,5a,33,35)) ){
HXLINE( 185)			 ::flixel::FlxState nextState1 =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN( 185)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE( 185)				::flixel::FlxG_obj::game->_requestedState = nextState1;
            			}
HXDLIN( 185)			goto _hx_goto_13;
            		}
            		/* default */{
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuState_obj,menuOpen,(void))


hx::ObjectPtr< MenuState_obj > MenuState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< MenuState_obj > __this = new MenuState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< MenuState_obj > MenuState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	MenuState_obj *__this = (MenuState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MenuState_obj), true, "MenuState"));
	*(void **)__this = MenuState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

MenuState_obj::MenuState_obj()
{
}

void MenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuState);
	HX_MARK_MEMBER_NAME(_grpMenu,"_grpMenu");
	HX_MARK_MEMBER_NAME(_grpMenuBar,"_grpMenuBar");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(charItems,"charItems");
	HX_MARK_MEMBER_NAME(selected,"selected");
	HX_MARK_MEMBER_NAME(charSelect,"charSelect");
	HX_MARK_MEMBER_NAME(curMenu,"curMenu");
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(selMax,"selMax");
	HX_MARK_MEMBER_NAME(_selArrowL,"_selArrowL");
	HX_MARK_MEMBER_NAME(_selArrowR,"_selArrowR");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_grpMenu,"_grpMenu");
	HX_VISIT_MEMBER_NAME(_grpMenuBar,"_grpMenuBar");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(charItems,"charItems");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	HX_VISIT_MEMBER_NAME(charSelect,"charSelect");
	HX_VISIT_MEMBER_NAME(curMenu,"curMenu");
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(selMax,"selMax");
	HX_VISIT_MEMBER_NAME(_selArrowL,"_selArrowL");
	HX_VISIT_MEMBER_NAME(_selArrowR,"_selArrowR");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MenuState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"selMax") ) { return hx::Val( selMax ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curMenu") ) { return hx::Val( curMenu ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_grpMenu") ) { return hx::Val( _grpMenu ); }
		if (HX_FIELD_EQ(inName,"selected") ) { return hx::Val( selected ); }
		if (HX_FIELD_EQ(inName,"selector") ) { return hx::Val( selector ); }
		if (HX_FIELD_EQ(inName,"initText") ) { return hx::Val( initText_dyn() ); }
		if (HX_FIELD_EQ(inName,"menuOpen") ) { return hx::Val( menuOpen_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"charItems") ) { return hx::Val( charItems ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"charSelect") ) { return hx::Val( charSelect ); }
		if (HX_FIELD_EQ(inName,"_selArrowL") ) { return hx::Val( _selArrowL ); }
		if (HX_FIELD_EQ(inName,"_selArrowR") ) { return hx::Val( _selArrowR ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_grpMenuBar") ) { return hx::Val( _grpMenuBar ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"menuHandling") ) { return hx::Val( menuHandling_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MenuState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"selMax") ) { selMax=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curMenu") ) { curMenu=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_grpMenu") ) { _grpMenu=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"charItems") ) { charItems=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"charSelect") ) { charSelect=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selArrowL") ) { _selArrowL=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selArrowR") ) { _selArrowR=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_grpMenuBar") ) { _grpMenuBar=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_grpMenu","\xa5","\xad","\x9d","\x39"));
	outFields->push(HX_HCSTRING("_grpMenuBar","\x2e","\x11","\xaf","\xad"));
	outFields->push(HX_HCSTRING("menuItems","\xe1","\x15","\xe5","\x5c"));
	outFields->push(HX_HCSTRING("charItems","\x4a","\x35","\x65","\x7b"));
	outFields->push(HX_HCSTRING("selected","\x5b","\x2a","\x6d","\xb1"));
	outFields->push(HX_HCSTRING("charSelect","\x72","\xb2","\x52","\xde"));
	outFields->push(HX_HCSTRING("curMenu","\x3f","\xb7","\x6e","\xb3"));
	outFields->push(HX_HCSTRING("selector","\x1f","\x33","\x6d","\xb1"));
	outFields->push(HX_HCSTRING("selMax","\x2a","\xe3","\x20","\x6a"));
	outFields->push(HX_HCSTRING("_selArrowL","\x5e","\x51","\x99","\x26"));
	outFields->push(HX_HCSTRING("_selArrowR","\x64","\x51","\x99","\x26"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MenuState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(MenuState_obj,_grpMenu),HX_HCSTRING("_grpMenu","\xa5","\xad","\x9d","\x39")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(MenuState_obj,_grpMenuBar),HX_HCSTRING("_grpMenuBar","\x2e","\x11","\xaf","\xad")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(MenuState_obj,menuItems),HX_HCSTRING("menuItems","\xe1","\x15","\xe5","\x5c")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(MenuState_obj,charItems),HX_HCSTRING("charItems","\x4a","\x35","\x65","\x7b")},
	{hx::fsInt,(int)offsetof(MenuState_obj,selected),HX_HCSTRING("selected","\x5b","\x2a","\x6d","\xb1")},
	{hx::fsInt,(int)offsetof(MenuState_obj,charSelect),HX_HCSTRING("charSelect","\x72","\xb2","\x52","\xde")},
	{hx::fsInt,(int)offsetof(MenuState_obj,curMenu),HX_HCSTRING("curMenu","\x3f","\xb7","\x6e","\xb3")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(MenuState_obj,selector),HX_HCSTRING("selector","\x1f","\x33","\x6d","\xb1")},
	{hx::fsInt,(int)offsetof(MenuState_obj,selMax),HX_HCSTRING("selMax","\x2a","\xe3","\x20","\x6a")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(MenuState_obj,_selArrowL),HX_HCSTRING("_selArrowL","\x5e","\x51","\x99","\x26")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(MenuState_obj,_selArrowR),HX_HCSTRING("_selArrowR","\x64","\x51","\x99","\x26")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuState_obj_sMemberFields[] = {
	HX_HCSTRING("_grpMenu","\xa5","\xad","\x9d","\x39"),
	HX_HCSTRING("_grpMenuBar","\x2e","\x11","\xaf","\xad"),
	HX_HCSTRING("menuItems","\xe1","\x15","\xe5","\x5c"),
	HX_HCSTRING("charItems","\x4a","\x35","\x65","\x7b"),
	HX_HCSTRING("selected","\x5b","\x2a","\x6d","\xb1"),
	HX_HCSTRING("charSelect","\x72","\xb2","\x52","\xde"),
	HX_HCSTRING("curMenu","\x3f","\xb7","\x6e","\xb3"),
	HX_HCSTRING("selector","\x1f","\x33","\x6d","\xb1"),
	HX_HCSTRING("selMax","\x2a","\xe3","\x20","\x6a"),
	HX_HCSTRING("_selArrowL","\x5e","\x51","\x99","\x26"),
	HX_HCSTRING("_selArrowR","\x64","\x51","\x99","\x26"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("initText","\xdd","\xfb","\xb0","\x51"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("menuHandling","\xa4","\x5f","\x6f","\x8d"),
	HX_HCSTRING("menuOpen","\x09","\x31","\x23","\x50"),
	::String(null()) };

static void MenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
};

#endif

hx::Class MenuState_obj::__mClass;

void MenuState_obj::__register()
{
	hx::Object *dummy = new MenuState_obj;
	MenuState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("MenuState","\xd2","\xbf","\xb6","\xc0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MenuState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MenuState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

