// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_util_PNGEncoder
#include <flixel/addons/util/PNGEncoder.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_27d2e2f923554749_57_encode,"flixel.addons.util.PNGEncoder","encode",0x8eb70a2e,"flixel.addons.util.PNGEncoder.encode","flixel/addons/util/PNGEncoder.hx",57,0x833654a7)
HX_LOCAL_STACK_FRAME(_hx_pos_27d2e2f923554749_103_writeChunk,"flixel.addons.util.PNGEncoder","writeChunk",0x4461c526,"flixel.addons.util.PNGEncoder.writeChunk","flixel/addons/util/PNGEncoder.hx",103,0x833654a7)
namespace flixel{
namespace addons{
namespace util{

void PNGEncoder_obj::__construct() { }

Dynamic PNGEncoder_obj::__CreateEmpty() { return new PNGEncoder_obj; }

void *PNGEncoder_obj::_hx_vtable = 0;

Dynamic PNGEncoder_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PNGEncoder_obj > _hx_result = new PNGEncoder_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PNGEncoder_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x06583064;
}

::Array< int > PNGEncoder_obj::crcTable;

bool PNGEncoder_obj::crcTableComputed;

 ::openfl::utils::ByteArrayData PNGEncoder_obj::encode( ::openfl::display::BitmapData img){
            	HX_GC_STACKFRAME(&_hx_pos_27d2e2f923554749_57_encode)
HXLINE(  59)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(  59)		 ::openfl::utils::ByteArrayData png = this1;
HXLINE(  61)		png->writeUnsignedInt((int)-1991225785);
HXLINE(  62)		png->writeUnsignedInt((int)218765834);
HXLINE(  64)		 ::openfl::utils::ByteArrayData this2 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(  64)		 ::openfl::utils::ByteArrayData IHDR = this2;
HXLINE(  65)		IHDR->writeInt(img->width);
HXLINE(  66)		IHDR->writeInt(img->height);
HXLINE(  67)		IHDR->writeUnsignedInt((int)134610944);
HXLINE(  68)		IHDR->writeByte((int)0);
HXLINE(  69)		::flixel::addons::util::PNGEncoder_obj::writeChunk(png,(int)1229472850,IHDR);
HXLINE(  71)		 ::openfl::utils::ByteArrayData this3 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(  71)		 ::openfl::utils::ByteArrayData IDAT = this3;
HXLINE(  72)		{
HXLINE(  72)			int _g1 = (int)0;
HXDLIN(  72)			int _g = img->height;
HXDLIN(  72)			while((_g1 < _g)){
HXLINE(  72)				_g1 = (_g1 + (int)1);
HXDLIN(  72)				int i = (_g1 - (int)1);
HXLINE(  75)				IDAT->writeByte((int)0);
HXLINE(  76)				int p;
HXLINE(  77)				if (!(img->transparent)) {
HXLINE(  79)					int _g3 = (int)0;
HXDLIN(  79)					int _g2 = img->width;
HXDLIN(  79)					while((_g3 < _g2)){
HXLINE(  79)						_g3 = (_g3 + (int)1);
HXDLIN(  79)						int j = (_g3 - (int)1);
HXLINE(  81)						p = img->getPixel(j,i);
HXLINE(  82)						IDAT->writeUnsignedInt(((int)((int)((int)p & (int)(int)16777215) << (int)(int)8) | (int)(int)255));
            					}
            				}
            				else {
HXLINE(  87)					int _g31 = (int)0;
HXDLIN(  87)					int _g21 = img->width;
HXDLIN(  87)					while((_g31 < _g21)){
HXLINE(  87)						_g31 = (_g31 + (int)1);
HXDLIN(  87)						int j1 = (_g31 - (int)1);
HXLINE(  89)						p = img->getPixel32(j1,i);
HXLINE(  90)						IDAT->writeUnsignedInt(((int)((int)((int)p & (int)(int)16777215) << (int)(int)8) | (int)hx::UShr(p,(int)24)));
            					}
            				}
            			}
            		}
HXLINE(  94)		IDAT->compress(null());
HXLINE(  95)		::flixel::addons::util::PNGEncoder_obj::writeChunk(png,(int)1229209940,IDAT);
HXLINE(  97)		::flixel::addons::util::PNGEncoder_obj::writeChunk(png,(int)1229278788,null());
HXLINE(  99)		return png;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PNGEncoder_obj,encode,return )

void PNGEncoder_obj::writeChunk( ::openfl::utils::ByteArrayData png,int type, ::openfl::utils::ByteArrayData data){
            	HX_STACKFRAME(&_hx_pos_27d2e2f923554749_103_writeChunk)
HXLINE( 104)		int c;
HXLINE( 106)		if (!(::flixel::addons::util::PNGEncoder_obj::crcTableComputed)) {
HXLINE( 108)			::flixel::addons::util::PNGEncoder_obj::crcTableComputed = true;
HXLINE( 109)			::flixel::addons::util::PNGEncoder_obj::crcTable = ::Array_obj< int >::__new(0);
HXLINE( 111)			{
HXLINE( 111)				int _g = (int)0;
HXDLIN( 111)				while((_g < (int)256)){
HXLINE( 111)					_g = (_g + (int)1);
HXDLIN( 111)					int n = (_g - (int)1);
HXLINE( 113)					c = n;
HXLINE( 114)					{
HXLINE( 114)						int _g1 = (int)0;
HXDLIN( 114)						while((_g1 < (int)8)){
HXLINE( 114)							_g1 = (_g1 + (int)1);
HXDLIN( 114)							int k = (_g1 - (int)1);
HXLINE( 116)							if ((((int)c & (int)(int)1) != (int)0)) {
HXLINE( 118)								c = ((int)(int)-306674912 ^ (int)hx::UShr(c,(int)1));
            							}
            							else {
HXLINE( 122)								c = hx::UShr(c,(int)1);
            							}
            						}
            					}
HXLINE( 125)					::flixel::addons::util::PNGEncoder_obj::crcTable[n] = c;
            				}
            			}
            		}
HXLINE( 128)		int len = (int)0;
HXLINE( 129)		if (hx::IsNotNull( data )) {
HXLINE( 131)			len = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data);
            		}
HXLINE( 133)		png->writeUnsignedInt(len);
HXLINE( 134)		int p = png->position;
HXLINE( 135)		png->writeUnsignedInt(type);
HXLINE( 136)		if (hx::IsNotNull( data )) {
HXLINE( 138)			png->writeBytes(data,(int)0,(int)0);
            		}
HXLINE( 140)		int e = png->position;
HXLINE( 141)		png->position = p;
HXLINE( 142)		c = (int)-1;
HXLINE( 143)		{
HXLINE( 143)			int _g11 = (int)0;
HXDLIN( 143)			int _g2 = (e - p);
HXDLIN( 143)			while((_g11 < _g2)){
HXLINE( 143)				_g11 = (_g11 + (int)1);
HXDLIN( 143)				int i = (_g11 - (int)1);
HXLINE( 145)				::Array< int > c1 = ::flixel::addons::util::PNGEncoder_obj::crcTable;
HXDLIN( 145)				int c2 = c1->__get(((int)((int)c ^ (int)png->readUnsignedByte()) & (int)(int)255));
HXDLIN( 145)				c = ((int)c2 ^ (int)hx::UShr(c,(int)8));
            			}
            		}
HXLINE( 147)		c = ((int)c ^ (int)(int)-1);
HXLINE( 148)		png->position = e;
HXLINE( 149)		png->writeUnsignedInt(c);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PNGEncoder_obj,writeChunk,(void))


PNGEncoder_obj::PNGEncoder_obj()
{
}

bool PNGEncoder_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"encode") ) { outValue = encode_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"crcTable") ) { outValue = ( crcTable ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeChunk") ) { outValue = writeChunk_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"crcTableComputed") ) { outValue = ( crcTableComputed ); return true; }
	}
	return false;
}

bool PNGEncoder_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"crcTable") ) { crcTable=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"crcTableComputed") ) { crcTableComputed=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PNGEncoder_obj_sMemberStorageInfo = 0;
static hx::StaticInfo PNGEncoder_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< int >*/ ,(void *) &PNGEncoder_obj::crcTable,HX_HCSTRING("crcTable","\x9a","\xe4","\x76","\xd6")},
	{hx::fsBool,(void *) &PNGEncoder_obj::crcTableComputed,HX_HCSTRING("crcTableComputed","\xc7","\x0b","\xac","\x82")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void PNGEncoder_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PNGEncoder_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PNGEncoder_obj::crcTable,"crcTable");
	HX_MARK_MEMBER_NAME(PNGEncoder_obj::crcTableComputed,"crcTableComputed");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PNGEncoder_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PNGEncoder_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PNGEncoder_obj::crcTable,"crcTable");
	HX_VISIT_MEMBER_NAME(PNGEncoder_obj::crcTableComputed,"crcTableComputed");
};

#endif

hx::Class PNGEncoder_obj::__mClass;

static ::String PNGEncoder_obj_sStaticFields[] = {
	HX_HCSTRING("crcTable","\x9a","\xe4","\x76","\xd6"),
	HX_HCSTRING("crcTableComputed","\xc7","\x0b","\xac","\x82"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("writeChunk","\x0e","\xc1","\x84","\xda"),
	::String(null())
};

void PNGEncoder_obj::__register()
{
	hx::Object *dummy = new PNGEncoder_obj;
	PNGEncoder_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.util.PNGEncoder","\x56","\x35","\xfb","\x91");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PNGEncoder_obj::__GetStatic;
	__mClass->mSetStaticField = &PNGEncoder_obj::__SetStatic;
	__mClass->mMarkFunc = PNGEncoder_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PNGEncoder_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< PNGEncoder_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PNGEncoder_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PNGEncoder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PNGEncoder_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace util
