// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_CustomFont
#include <CustomFont.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2d8d6906e185bcca_16_new,"CustomFont","new",0x83430332,"CustomFont.new","Preloader.hx",16,0xc73f5828)

void CustomFont_obj::__construct(::String name){
            	HX_STACKFRAME(&_hx_pos_2d8d6906e185bcca_16_new)
HXDLIN(  16)		super::__construct(name);
            	}

Dynamic CustomFont_obj::__CreateEmpty() { return new CustomFont_obj; }

void *CustomFont_obj::_hx_vtable = 0;

Dynamic CustomFont_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CustomFont_obj > _hx_result = new CustomFont_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CustomFont_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6aed2e71) {
		if (inClassId<=(int)0x45dd0d08) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x45dd0d08;
		} else {
			return inClassId==(int)0x6aed2e71;
		}
	} else {
		return inClassId==(int)0x7d07fbf0;
	}
}


hx::ObjectPtr< CustomFont_obj > CustomFont_obj::__new(::String name) {
	hx::ObjectPtr< CustomFont_obj > __this = new CustomFont_obj();
	__this->__construct(name);
	return __this;
}

hx::ObjectPtr< CustomFont_obj > CustomFont_obj::__alloc(hx::Ctx *_hx_ctx,::String name) {
	CustomFont_obj *__this = (CustomFont_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CustomFont_obj), true, "CustomFont"));
	*(void **)__this = CustomFont_obj::_hx_vtable;
	__this->__construct(name);
	return __this;
}

CustomFont_obj::CustomFont_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CustomFont_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CustomFont_obj_sStaticStorageInfo = 0;
#endif

static void CustomFont_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CustomFont_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CustomFont_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CustomFont_obj::__mClass,"__mClass");
};

#endif

hx::Class CustomFont_obj::__mClass;

void CustomFont_obj::__register()
{
	hx::Object *dummy = new CustomFont_obj;
	CustomFont_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("CustomFont","\x40","\x42","\x19","\x98");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CustomFont_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CustomFont_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CustomFont_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CustomFont_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CustomFont_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

