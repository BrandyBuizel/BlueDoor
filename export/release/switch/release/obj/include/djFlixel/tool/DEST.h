// Generated by Haxe 3.4.7
#ifndef INCLUDED_djFlixel_tool_DEST
#define INCLUDED_djFlixel_tool_DEST

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(djFlixel,tool,DEST)
HX_DECLARE_CLASS2(flixel,tweens,FlxTween)
HX_DECLARE_CLASS3(flixel,tweens,misc,NumTween)
HX_DECLARE_CLASS3(flixel,tweens,misc,VarTween)
HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)

namespace djFlixel{
namespace tool{


class HXCPP_CLASS_ATTRIBUTES DEST_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef DEST_obj OBJ_;
		DEST_obj();

	public:
		enum { _hx_ClassId = 0x535c8520 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="djFlixel.tool.DEST")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"djFlixel.tool.DEST"); }

		hx::ObjectPtr< DEST_obj > __new() {
			hx::ObjectPtr< DEST_obj > __this = new DEST_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< DEST_obj > __alloc(hx::Ctx *_hx_ctx) {
			DEST_obj *__this = (DEST_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DEST_obj), false, "djFlixel.tool.DEST"));
			*(void **)__this = DEST_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DEST_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("DEST","\x62","\x26","\x27","\x2d"); }

		static  ::flixel::util::FlxTimer timer( ::flixel::util::FlxTimer t);
		static ::Dynamic timer_dyn();

		static  ::flixel::tweens::misc::VarTween tween( ::flixel::tweens::misc::VarTween t);
		static ::Dynamic tween_dyn();

		static  ::flixel::tweens::misc::NumTween numTween( ::flixel::tweens::misc::NumTween t);
		static ::Dynamic numTween_dyn();

		static ::Array< ::Dynamic> tweenAr(::Array< ::Dynamic> a);
		static ::Dynamic tweenAr_dyn();

		static ::Dynamic map(::Dynamic m);
		static ::Dynamic map_dyn();

};

} // end namespace djFlixel
} // end namespace tool

#endif /* INCLUDED_djFlixel_tool_DEST */ 
