// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_djFlixel_fx_BoxFader
#include <djFlixel/fx/BoxFader.h>
#endif
#ifndef INCLUDED_djFlixel_tool_DEST
#include <djFlixel/tool/DEST.h>
#endif
#ifndef INCLUDED_djFlixel_tool_DataTool
#include <djFlixel/tool/DataTool.h>
#endif
#ifndef INCLUDED_djFlixel_tool_DelayCall
#include <djFlixel/tool/DelayCall.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b8e0c701cd943123_24_new,"djFlixel.fx.BoxFader","new",0x80a246ad,"djFlixel.fx.BoxFader.new","djFlixel/fx/BoxFader.hx",24,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_60_kill,"djFlixel.fx.BoxFader","kill",0x0b62ecb1,"djFlixel.fx.BoxFader.kill","djFlixel/fx/BoxFader.hx",60,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_71_setColor,"djFlixel.fx.BoxFader","setColor",0xe3916cf4,"djFlixel.fx.BoxFader.setColor","djFlixel/fx/BoxFader.hx",71,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_84_setOff,"djFlixel.fx.BoxFader","setOff",0xc5f0d8c0,"djFlixel.fx.BoxFader.setOff","djFlixel/fx/BoxFader.hx",84,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_115_fadeOff,"djFlixel.fx.BoxFader","fadeOff",0x8ed84c20,"djFlixel.fx.BoxFader.fadeOff","djFlixel/fx/BoxFader.hx",115,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_99_fadeOff,"djFlixel.fx.BoxFader","fadeOff",0x8ed84c20,"djFlixel.fx.BoxFader.fadeOff","djFlixel/fx/BoxFader.hx",99,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_129_fadeColor,"djFlixel.fx.BoxFader","fadeColor",0x4bc47854,"djFlixel.fx.BoxFader.fadeColor","djFlixel/fx/BoxFader.hx",129,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_152__timerHardStep,"djFlixel.fx.BoxFader","_timerHardStep",0x9dfa0fd0,"djFlixel.fx.BoxFader._timerHardStep","djFlixel/fx/BoxFader.hx",152,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_148__timerHardStep,"djFlixel.fx.BoxFader","_timerHardStep",0x9dfa0fd0,"djFlixel.fx.BoxFader._timerHardStep","djFlixel/fx/BoxFader.hx",148,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_28_boot,"djFlixel.fx.BoxFader","boot",0x05749145,"djFlixel.fx.BoxFader.boot","djFlixel/fx/BoxFader.hx",28,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_30_boot,"djFlixel.fx.BoxFader","boot",0x05749145,"djFlixel.fx.BoxFader.boot","djFlixel/fx/BoxFader.hx",30,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_32_boot,"djFlixel.fx.BoxFader","boot",0x05749145,"djFlixel.fx.BoxFader.boot","djFlixel/fx/BoxFader.hx",32,0x85ccfac3)
HX_LOCAL_STACK_FRAME(_hx_pos_b8e0c701cd943123_35_boot,"djFlixel.fx.BoxFader","boot",0x05749145,"djFlixel.fx.BoxFader.boot","djFlixel/fx/BoxFader.hx",35,0x85ccfac3)
static const ::String _hx_array_data_a49c6c3b_13[] = {
	HX_("normal",27,72,69,30),HX_("add",21,f2,49,00),HX_("darken",5f,36,3a,21),HX_("difference",fd,9b,91,46),HX_("erase",e6,e8,1c,73),HX_("hardlight",0b,6e,6b,53),HX_("invert",16,e7,d8,9f),HX_("lighten",bf,4a,e3,19),HX_("multiply",24,e2,8c,9a),HX_("overlay",90,43,10,a9),HX_("screen",6c,3b,5d,47),HX_("subtract",14,75,11,f8),
};
namespace djFlixel{
namespace fx{

void BoxFader_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_WIDTH,hx::Null< Float >  __o_HEIGHT){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
Float WIDTH = __o_WIDTH.Default(0);
Float HEIGHT = __o_HEIGHT.Default(0);
            	HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_24_new)
HXLINE(  42)		this->flag_is_clear = true;
HXLINE(  47)		super::__construct(X,Y,null());
HXLINE(  48)		this->set_moves(false);
HXLINE(  49)		this->set_active(false);
HXLINE(  50)		if ((WIDTH == (int)0)) {
HXLINE(  50)			WIDTH = ::flixel::FlxG_obj::width;
            		}
HXLINE(  51)		if ((HEIGHT == (int)0)) {
HXLINE(  51)			HEIGHT = ::flixel::FlxG_obj::height;
            		}
HXLINE(  52)		int _hx_tmp = ::Std_obj::_hx_int(WIDTH);
HXDLIN(  52)		this->makeGraphic(_hx_tmp,::Std_obj::_hx_int(HEIGHT),null(),null(),null());
HXLINE(  53)		this->setOff();
            	}

Dynamic BoxFader_obj::__CreateEmpty() { return new BoxFader_obj; }

void *BoxFader_obj::_hx_vtable = 0;

Dynamic BoxFader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BoxFader_obj > _hx_result = new BoxFader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool BoxFader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x00f07843) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x00f07843;
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void BoxFader_obj::kill(){
            	HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_60_kill)
HXLINE(  61)		this->tm = ::djFlixel::tool::DEST_obj::timer(this->tm);
HXLINE(  62)		this->dc = ( ( ::djFlixel::tool::DelayCall)(::flixel::util::FlxDestroyUtil_obj::destroy(this->dc)) );
            	}


void BoxFader_obj::setColor(int Color, ::Dynamic BMode,hx::Null< Float >  __o_Alpha){
Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_71_setColor)
HXLINE(  72)		this->kill();
HXLINE(  73)		this->flag_is_clear = false;
HXLINE(  74)		this->set_alpha(Alpha);
HXLINE(  75)		this->set_visible(true);
HXLINE(  76)		this->set_color(Color);
HXLINE(  77)		if (hx::IsNotNull( BMode )) {
HXLINE(  77)			this->set_blend(BMode);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(BoxFader_obj,setColor,(void))

void BoxFader_obj::setOff(){
            	HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_84_setOff)
HXLINE(  85)		this->kill();
HXLINE(  86)		this->flag_is_clear = true;
HXLINE(  87)		this->set_alpha((int)0);
HXLINE(  88)		this->set_visible(false);
HXLINE(  89)		this->set_blend((int)10);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoxFader_obj,setOff,(void))

void BoxFader_obj::fadeOff( ::Dynamic Callback, ::Dynamic P){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,P, ::djFlixel::fx::BoxFader,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_115_fadeOff)
HXLINE( 116)			_gthis->setOff();
HXLINE( 117)			if (hx::IsNotNull(  ::Dynamic(P->__Field(HX_("callback",c5,99,06,7f),hx::paccDynamic)) )) {
HXLINE( 117)				P->__Field(HX_("callback",c5,99,06,7f),hx::paccDynamic)();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_99_fadeOff)
HXLINE(  98)		 ::djFlixel::fx::BoxFader _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 100)		P = ::djFlixel::tool::DataTool_obj::copyFieldsC(P, ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("steps",a7,7b,0e,84),(int)4)
            			->setFixed(1,HX_("delayPost",83,05,92,2b),((Float)0.2))
            			->setFixed(2,HX_("time",0d,cc,fc,4c),((Float)1.25))
            			->setFixed(3,HX_("callback",c5,99,06,7f),Callback)));
HXLINE( 107)		if (this->flag_is_clear) {
HXLINE( 108)			if (hx::IsNotNull(  ::Dynamic(P->__Field(HX_("callback",c5,99,06,7f),hx::paccDynamic)) )) {
HXLINE( 108)				P->__Field(HX_("callback",c5,99,06,7f),hx::paccDynamic)();
            			}
HXLINE( 109)			return;
            		}
HXLINE( 112)		this->kill();
HXLINE( 115)		this->_timerHardStep(( (Float)(P->__Field(HX_("time",0d,cc,fc,4c),hx::paccDynamic)) ),this->alpha,(int)0,( (int)(P->__Field(HX_("steps",a7,7b,0e,84),hx::paccDynamic)) ), ::Dynamic(new _hx_Closure_0(P,_gthis)),P->__Field(HX_("delayPost",83,05,92,2b),hx::paccDynamic));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BoxFader_obj,fadeOff,(void))

void BoxFader_obj::fadeColor(hx::Null< int >  __o_Color, ::Dynamic P, ::Dynamic Callback){
int Color = __o_Color.Default(-16777216);
            	HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_129_fadeColor)
HXLINE( 130)		P = ::djFlixel::tool::DataTool_obj::copyFieldsC(P, ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("steps",a7,7b,0e,84),(int)4)
            			->setFixed(1,HX_("keepAlpha",99,44,82,a0),true)
            			->setFixed(2,HX_("blend",51,e8,f4,b4),HX_("normal",27,72,69,30))
            			->setFixed(3,HX_("delayPost",83,05,92,2b),((Float)0.2))
            			->setFixed(4,HX_("time",0d,cc,fc,4c),((Float)1.25))
            			->setFixed(5,HX_("callback",c5,99,06,7f),Callback)));
HXLINE( 140)		Float _hx_tmp;
HXDLIN( 140)		if (( (bool)(P->__Field(HX_("keepAlpha",99,44,82,a0),hx::paccDynamic)) )) {
HXLINE( 140)			_hx_tmp = this->alpha;
            		}
            		else {
HXLINE( 140)			_hx_tmp = (int)0;
            		}
HXDLIN( 140)		this->setColor(Color,P->__Field(HX_("blend",51,e8,f4,b4),hx::paccDynamic),_hx_tmp);
HXLINE( 142)		this->_timerHardStep(( (Float)(P->__Field(HX_("time",0d,cc,fc,4c),hx::paccDynamic)) ),this->alpha,(int)1,( (int)(P->__Field(HX_("steps",a7,7b,0e,84),hx::paccDynamic)) ),P->__Field(HX_("callback",c5,99,06,7f),hx::paccDynamic),P->__Field(HX_("delayPost",83,05,92,2b),hx::paccDynamic));
            	}


HX_DEFINE_DYNAMIC_FUNC3(BoxFader_obj,fadeColor,(void))

void BoxFader_obj::_timerHardStep(Float totalTime,Float start,Float end,int steps, ::Dynamic callback,hx::Null< Float >  __o_delayCall){
            		HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0, ::djFlixel::fx::BoxFader,_gthis,Float,fadeStep,Float,delayCall,Float,end, ::Dynamic,callback) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer _){
            			HX_GC_STACKFRAME(&_hx_pos_b8e0c701cd943123_152__timerHardStep)
HXLINE( 153)			{
HXLINE( 153)				 ::djFlixel::fx::BoxFader _g = _gthis;
HXDLIN( 153)				_g->set_alpha((_g->alpha + fadeStep));
            			}
HXLINE( 154)			 ::flixel::util::FlxTimer _this = _gthis->tm;
HXDLIN( 154)			if (((_this->loops - _this->_loopsCounter) == (int)0)) {
HXLINE( 155)				_gthis->set_alpha(end);
HXLINE( 156)				_gthis->dc =  ::djFlixel::tool::DelayCall_obj::__alloc( HX_CTX ,callback,delayCall,null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

Float delayCall = __o_delayCall.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_b8e0c701cd943123_148__timerHardStep)
HXLINE( 147)		 ::djFlixel::fx::BoxFader _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 149)		Float tickTime = ((Float)totalTime / (Float)steps);
HXLINE( 150)		Float fadeStep = ((Float)(end - start) / (Float)steps);
HXLINE( 151)		this->tm =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXLINE( 152)		this->tm->start(tickTime, ::Dynamic(new _hx_Closure_0(_gthis,fadeStep,delayCall,end,callback)),steps);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BoxFader_obj,_timerHardStep,(void))

int BoxFader_obj::FADE_STEPS;

Float BoxFader_obj::FADE_TIME;

Float BoxFader_obj::DELAY_POST;

::Array< ::String > BoxFader_obj::BLEND_MODES;


hx::ObjectPtr< BoxFader_obj > BoxFader_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_WIDTH,hx::Null< Float >  __o_HEIGHT) {
	hx::ObjectPtr< BoxFader_obj > __this = new BoxFader_obj();
	__this->__construct(__o_X,__o_Y,__o_WIDTH,__o_HEIGHT);
	return __this;
}

hx::ObjectPtr< BoxFader_obj > BoxFader_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_WIDTH,hx::Null< Float >  __o_HEIGHT) {
	BoxFader_obj *__this = (BoxFader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BoxFader_obj), true, "djFlixel.fx.BoxFader"));
	*(void **)__this = BoxFader_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_WIDTH,__o_HEIGHT);
	return __this;
}

BoxFader_obj::BoxFader_obj()
{
}

void BoxFader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BoxFader);
	HX_MARK_MEMBER_NAME(tm,"tm");
	HX_MARK_MEMBER_NAME(dc,"dc");
	HX_MARK_MEMBER_NAME(flag_is_clear,"flag_is_clear");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BoxFader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tm,"tm");
	HX_VISIT_MEMBER_NAME(dc,"dc");
	HX_VISIT_MEMBER_NAME(flag_is_clear,"flag_is_clear");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BoxFader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"tm") ) { return hx::Val( tm ); }
		if (HX_FIELD_EQ(inName,"dc") ) { return hx::Val( dc ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"kill") ) { return hx::Val( kill_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"setOff") ) { return hx::Val( setOff_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fadeOff") ) { return hx::Val( fadeOff_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setColor") ) { return hx::Val( setColor_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fadeColor") ) { return hx::Val( fadeColor_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"flag_is_clear") ) { return hx::Val( flag_is_clear ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_timerHardStep") ) { return hx::Val( _timerHardStep_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BoxFader_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"BLEND_MODES") ) { outValue = ( BLEND_MODES ); return true; }
	}
	return false;
}

hx::Val BoxFader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"tm") ) { tm=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dc") ) { dc=inValue.Cast<  ::djFlixel::tool::DelayCall >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"flag_is_clear") ) { flag_is_clear=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BoxFader_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"BLEND_MODES") ) { BLEND_MODES=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void BoxFader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("tm","\x79","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("dc","\x7f","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("flag_is_clear","\x6b","\xf6","\x5e","\x69"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BoxFader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::util::FlxTimer*/ ,(int)offsetof(BoxFader_obj,tm),HX_HCSTRING("tm","\x79","\x65","\x00","\x00")},
	{hx::fsObject /*::djFlixel::tool::DelayCall*/ ,(int)offsetof(BoxFader_obj,dc),HX_HCSTRING("dc","\x7f","\x57","\x00","\x00")},
	{hx::fsBool,(int)offsetof(BoxFader_obj,flag_is_clear),HX_HCSTRING("flag_is_clear","\x6b","\xf6","\x5e","\x69")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BoxFader_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BoxFader_obj::FADE_STEPS,HX_HCSTRING("FADE_STEPS","\x44","\xbd","\x3b","\x88")},
	{hx::fsFloat,(void *) &BoxFader_obj::FADE_TIME,HX_HCSTRING("FADE_TIME","\xf0","\xd0","\xf3","\xc0")},
	{hx::fsFloat,(void *) &BoxFader_obj::DELAY_POST,HX_HCSTRING("DELAY_POST","\xfc","\xb1","\xb7","\xf6")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &BoxFader_obj::BLEND_MODES,HX_HCSTRING("BLEND_MODES","\xc2","\x7d","\xc4","\x29")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BoxFader_obj_sMemberFields[] = {
	HX_HCSTRING("tm","\x79","\x65","\x00","\x00"),
	HX_HCSTRING("dc","\x7f","\x57","\x00","\x00"),
	HX_HCSTRING("flag_is_clear","\x6b","\xf6","\x5e","\x69"),
	HX_HCSTRING("kill","\x9e","\xdf","\x09","\x47"),
	HX_HCSTRING("setColor","\x61","\xda","\x90","\x58"),
	HX_HCSTRING("setOff","\xed","\x20","\x6c","\x6f"),
	HX_HCSTRING("fadeOff","\x53","\x2b","\x3c","\x31"),
	HX_HCSTRING("fadeColor","\x47","\xca","\x44","\x36"),
	HX_HCSTRING("_timerHardStep","\xfd","\xcc","\x6c","\xb4"),
	::String(null()) };

static void BoxFader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BoxFader_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BoxFader_obj::FADE_STEPS,"FADE_STEPS");
	HX_MARK_MEMBER_NAME(BoxFader_obj::FADE_TIME,"FADE_TIME");
	HX_MARK_MEMBER_NAME(BoxFader_obj::DELAY_POST,"DELAY_POST");
	HX_MARK_MEMBER_NAME(BoxFader_obj::BLEND_MODES,"BLEND_MODES");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BoxFader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BoxFader_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BoxFader_obj::FADE_STEPS,"FADE_STEPS");
	HX_VISIT_MEMBER_NAME(BoxFader_obj::FADE_TIME,"FADE_TIME");
	HX_VISIT_MEMBER_NAME(BoxFader_obj::DELAY_POST,"DELAY_POST");
	HX_VISIT_MEMBER_NAME(BoxFader_obj::BLEND_MODES,"BLEND_MODES");
};

#endif

hx::Class BoxFader_obj::__mClass;

static ::String BoxFader_obj_sStaticFields[] = {
	HX_HCSTRING("FADE_STEPS","\x44","\xbd","\x3b","\x88"),
	HX_HCSTRING("FADE_TIME","\xf0","\xd0","\xf3","\xc0"),
	HX_HCSTRING("DELAY_POST","\xfc","\xb1","\xb7","\xf6"),
	HX_HCSTRING("BLEND_MODES","\xc2","\x7d","\xc4","\x29"),
	::String(null())
};

void BoxFader_obj::__register()
{
	hx::Object *dummy = new BoxFader_obj;
	BoxFader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("djFlixel.fx.BoxFader","\x3b","\x6c","\x9c","\xa4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BoxFader_obj::__GetStatic;
	__mClass->mSetStaticField = &BoxFader_obj::__SetStatic;
	__mClass->mMarkFunc = BoxFader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BoxFader_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BoxFader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BoxFader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BoxFader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BoxFader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BoxFader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BoxFader_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_28_boot)
HXDLIN(  28)		FADE_STEPS = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_30_boot)
HXDLIN(  30)		FADE_TIME = ((Float)1.25);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_32_boot)
HXDLIN(  32)		DELAY_POST = ((Float)0.2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b8e0c701cd943123_35_boot)
HXDLIN(  35)		BLEND_MODES = ::Array_obj< ::String >::fromData( _hx_array_data_a49c6c3b_13,12);
            	}
}

} // end namespace djFlixel
} // end namespace fx
