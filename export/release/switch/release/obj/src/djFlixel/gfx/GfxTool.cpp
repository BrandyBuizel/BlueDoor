// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_djFlixel_gfx_GfxTool
#include <djFlixel/gfx/GfxTool.h>
#endif
#ifndef INCLUDED_djFlixel_gfx_Palette_Amstrad
#include <djFlixel/gfx/Palette_Amstrad.h>
#endif
#ifndef INCLUDED_djFlixel_gfx_Palette_Arne16
#include <djFlixel/gfx/Palette_Arne16.h>
#endif
#ifndef INCLUDED_djFlixel_gfx_Palette_DB16
#include <djFlixel/gfx/Palette_DB16.h>
#endif
#ifndef INCLUDED_djFlixel_gfx_Palette_DB32
#include <djFlixel/gfx/Palette_DB32.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_33_drawTilesToBitmap,"djFlixel.gfx.GfxTool","drawTilesToBitmap",0xbbb0614d,"djFlixel.gfx.GfxTool.drawTilesToBitmap","djFlixel/gfx/GfxTool.hx",33,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_73_applyShadow,"djFlixel.gfx.GfxTool","applyShadow",0x5efa0bf0,"djFlixel.gfx.GfxTool.applyShadow","djFlixel/gfx/GfxTool.hx",73,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_98_getBitmapPortion,"djFlixel.gfx.GfxTool","getBitmapPortion",0x7c13d300,"djFlixel.gfx.GfxTool.getBitmapPortion","djFlixel/gfx/GfxTool.hx",98,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_118_resolveBitmapData,"djFlixel.gfx.GfxTool","resolveBitmapData",0x1f2b9d47,"djFlixel.gfx.GfxTool.resolveBitmapData","djFlixel/gfx/GfxTool.hx",118,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_141_drawBitmapOn,"djFlixel.gfx.GfxTool","drawBitmapOn",0x4aebf8d0,"djFlixel.gfx.GfxTool.drawBitmapOn","djFlixel/gfx/GfxTool.hx",141,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_154_stitchBitmaps,"djFlixel.gfx.GfxTool","stitchBitmaps",0xd16465b5,"djFlixel.gfx.GfxTool.stitchBitmaps","djFlixel/gfx/GfxTool.hx",154,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_174_getSpriteFrame,"djFlixel.gfx.GfxTool","getSpriteFrame",0x7f231630,"djFlixel.gfx.GfxTool.getSpriteFrame","djFlixel/gfx/GfxTool.hx",174,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_192_replaceColor,"djFlixel.gfx.GfxTool","replaceColor",0x5ac05a4d,"djFlixel.gfx.GfxTool.replaceColor","djFlixel/gfx/GfxTool.hx",192,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_211_getGraphicColorReplace,"djFlixel.gfx.GfxTool","getGraphicColorReplace",0x2c888821,"djFlixel.gfx.GfxTool.getGraphicColorReplace","djFlixel/gfx/GfxTool.hx",211,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_254_extractRed,"djFlixel.gfx.GfxTool","extractRed",0xc70f4cce,"djFlixel.gfx.GfxTool.extractRed","djFlixel/gfx/GfxTool.hx",254,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_258_extractGreen,"djFlixel.gfx.GfxTool","extractGreen",0xd6471b80,"djFlixel.gfx.GfxTool.extractGreen","djFlixel/gfx/GfxTool.hx",258,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_262_extractBlue,"djFlixel.gfx.GfxTool","extractBlue",0x5bc5dc7d,"djFlixel.gfx.GfxTool.extractBlue","djFlixel/gfx/GfxTool.hx",262,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_273_snapToLowerBitRepr,"djFlixel.gfx.GfxTool","snapToLowerBitRepr",0x8407fe24,"djFlixel.gfx.GfxTool.snapToLowerBitRepr","djFlixel/gfx/GfxTool.hx",273,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_289_rainbowStripes,"djFlixel.gfx.GfxTool","rainbowStripes",0xa07ad3ee,"djFlixel.gfx.GfxTool.rainbowStripes","djFlixel/gfx/GfxTool.hx",289,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_315_stringColor,"djFlixel.gfx.GfxTool","stringColor",0x5b3da6d4,"djFlixel.gfx.GfxTool.stringColor","djFlixel/gfx/GfxTool.hx",315,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_343_palCol,"djFlixel.gfx.GfxTool","palCol",0x3060ece3,"djFlixel.gfx.GfxTool.palCol","djFlixel/gfx/GfxTool.hx",343,0xe2a46a50)
HX_LOCAL_STACK_FRAME(_hx_pos_16237b24a89d6d61_305_boot,"djFlixel.gfx.GfxTool","boot",0x579d93f0,"djFlixel.gfx.GfxTool.boot","djFlixel/gfx/GfxTool.hx",305,0xe2a46a50)
namespace djFlixel{
namespace gfx{

void GfxTool_obj::__construct() { }

Dynamic GfxTool_obj::__CreateEmpty() { return new GfxTool_obj; }

void *GfxTool_obj::_hx_vtable = 0;

Dynamic GfxTool_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GfxTool_obj > _hx_result = new GfxTool_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GfxTool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b34621e;
}

 ::openfl::display::BitmapData GfxTool_obj::drawTilesToBitmap( ::Dynamic source,int tw,int th,::Array< ::Dynamic> mapdata){
            	HX_GC_STACKFRAME(&_hx_pos_16237b24a89d6d61_33_drawTilesToBitmap)
HXLINE(  34)		 ::openfl::display::BitmapData bsrc = ::djFlixel::gfx::GfxTool_obj::resolveBitmapData(source);
HXLINE(  35)		int mapwidth = mapdata->__get((int)0).StaticCast< ::Array< int > >()->length;
HXLINE(  36)		int mapheight = mapdata->length;
HXLINE(  37)		 ::openfl::display::BitmapData bit =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(mapwidth * tw),(mapheight * th),true,(int)0);
HXLINE(  38)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  39)		 ::openfl::geom::Point point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  40)		int sTilesInW = ::Std_obj::_hx_int(((Float)bsrc->width / (Float)tw));
HXLINE(  41)		int tile;
HXLINE(  43)		bit->lock();
HXLINE(  45)		{
HXLINE(  45)			int _g1 = (int)0;
HXDLIN(  45)			int _g = mapheight;
HXDLIN(  45)			while((_g1 < _g)){
HXLINE(  45)				_g1 = (_g1 + (int)1);
HXDLIN(  45)				int yy = (_g1 - (int)1);
HXLINE(  46)				{
HXLINE(  46)					int _g3 = (int)0;
HXDLIN(  46)					int _g2 = mapwidth;
HXDLIN(  46)					while((_g3 < _g2)){
HXLINE(  46)						_g3 = (_g3 + (int)1);
HXDLIN(  46)						int xx = (_g3 - (int)1);
HXLINE(  48)						tile = (mapdata->__get(yy).StaticCast< ::Array< int > >()->__get(xx) - (int)1);
HXLINE(  50)						if ((tile >= (int)0)) {
HXLINE(  52)							rect->setTo((hx::Mod(tile,sTilesInW) * tw),(::Std_obj::_hx_int(((Float)tile / (Float)sTilesInW)) * th),tw,th);
HXLINE(  54)							point->setTo((xx * tw),(yy * th));
HXLINE(  55)							bit->copyPixels(bsrc,rect,point,null(),null(),null());
            						}
            					}
            				}
            			}
            		}
HXLINE(  59)		bit->unlock(null());
HXLINE(  60)		return bit;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GfxTool_obj,drawTilesToBitmap,return )

 ::openfl::display::BitmapData GfxTool_obj::applyShadow( ::openfl::display::BitmapData im,hx::Null< int >  __o_color,hx::Null< int >  __o_offx,hx::Null< int >  __o_offy){
int color = __o_color.Default(-15658735);
int offx = __o_offx.Default(1);
int offy = __o_offy.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_16237b24a89d6d61_73_applyShadow)
HXLINE(  74)		 ::openfl::geom::Rectangle _tr =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,im->width,im->height);
HXLINE(  75)		 ::openfl::geom::ColorTransform _tc =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,(int)1,(int)1,(int)1,(int)1,(int)0,(int)0,(int)0,(int)0);
HXLINE(  76)		 ::openfl::geom::Matrix _ma =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  77)		 ::openfl::geom::Point _tp =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  78)		int im1 = im->width;
HXDLIN(  78)		int im2 = im->height;
HXDLIN(  78)		 ::openfl::display::BitmapData n =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(im1 + ::Math_obj::abs(offx)),(im2 + ::Math_obj::abs(offy)),true,(int)0);
HXLINE(  80)		_ma->tx = offx;
HXDLIN(  80)		_ma->ty = offy;
HXDLIN(  80)		_tc->set_color(color);
HXLINE(  81)		n->draw(im,_ma,_tc,null(),null(),null());
HXLINE(  82)		_ma->identity();
HXLINE(  83)		n->draw(im,_ma,null(),null(),null(),null());
HXLINE(  85)		return n;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GfxTool_obj,applyShadow,return )

 ::openfl::display::BitmapData GfxTool_obj::getBitmapPortion( ::Dynamic source,int x,int y,int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_16237b24a89d6d61_98_getBitmapPortion)
HXLINE(  99)		 ::openfl::display::BitmapData r =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,null(),null());
HXLINE( 100)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x,y,width,height);
HXLINE( 101)		 ::openfl::geom::Point point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE( 102)		 ::openfl::display::BitmapData sourceData = ::djFlixel::gfx::GfxTool_obj::resolveBitmapData(source);
HXLINE( 106)		r->copyPixels(sourceData,rect,point,null(),null(),null());
HXLINE( 108)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GfxTool_obj,getBitmapPortion,return )

 ::openfl::display::BitmapData GfxTool_obj::resolveBitmapData( ::Dynamic Graphic){
            	HX_STACKFRAME(&_hx_pos_16237b24a89d6d61_118_resolveBitmapData)
HXLINE( 119)		if (::Std_obj::is(Graphic,hx::ClassOf< ::openfl::display::BitmapData >())) {
HXLINE( 120)			return ( ( ::openfl::display::BitmapData)(Graphic) );
            		}
            		else {
HXLINE( 122)			if (::Std_obj::is(Graphic,hx::ClassOf< ::flixel::graphics::FlxGraphic >())) {
HXLINE( 123)				return hx::TCast<  ::flixel::graphics::FlxGraphic >::cast(Graphic)->bitmap;
            			}
            			else {
HXLINE( 125)				if (::Std_obj::is(Graphic,hx::ClassOf< ::String >())) {
HXLINE( 126)					 ::openfl::display::BitmapData _hx_tmp;
HXDLIN( 126)					if (::openfl::utils::Assets_obj::exists(( (::String)(Graphic) ),null())) {
HXLINE( 126)						_hx_tmp = ::openfl::utils::Assets_obj::getBitmapData(( (::String)(Graphic) ),false);
            					}
            					else {
HXLINE( 126)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXDLIN( 126)						_hx_tmp = null();
            					}
HXDLIN( 126)					return _hx_tmp;
            				}
            			}
            		}
HXLINE( 128)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GfxTool_obj,resolveBitmapData,return )

void GfxTool_obj::drawBitmapOn( ::openfl::display::BitmapData src, ::openfl::display::BitmapData dest,hx::Null< int >  __o_x,hx::Null< int >  __o_y){
int x = __o_x.Default(0);
int y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_16237b24a89d6d61_141_drawBitmapOn)
HXLINE( 142)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,src->width,src->height);
HXLINE( 143)		 ::openfl::geom::Point point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,x,y);
HXLINE( 144)		dest->copyPixels(src,rect,point,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GfxTool_obj,drawBitmapOn,(void))

 ::openfl::display::BitmapData GfxTool_obj::stitchBitmaps(::Array< ::Dynamic> ar){
            	HX_GC_STACKFRAME(&_hx_pos_16237b24a89d6d61_154_stitchBitmaps)
HXLINE( 155)		 ::openfl::display::BitmapData final =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(ar->length * ar->__get((int)0).StaticCast<  ::openfl::display::BitmapData >()->width),ar->__get((int)0).StaticCast<  ::openfl::display::BitmapData >()->height,true,(int)0);
HXLINE( 156)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,ar->__get((int)0).StaticCast<  ::openfl::display::BitmapData >()->width,ar->__get((int)0).StaticCast<  ::openfl::display::BitmapData >()->height);
HXLINE( 157)		 ::openfl::geom::Point p =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE( 158)		{
HXLINE( 158)			int _g1 = (int)0;
HXDLIN( 158)			int _g = ar->length;
HXDLIN( 158)			while((_g1 < _g)){
HXLINE( 158)				_g1 = (_g1 + (int)1);
HXDLIN( 158)				int i = (_g1 - (int)1);
HXLINE( 159)				final->copyPixels(ar->__get(i).StaticCast<  ::openfl::display::BitmapData >(),rect,p,null(),null(),null());
HXLINE( 160)				 ::openfl::geom::Point p1 = p;
HXDLIN( 160)				p1->x = (p1->x + ar->__get(i).StaticCast<  ::openfl::display::BitmapData >()->width);
            			}
            		}
HXLINE( 162)		return final;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GfxTool_obj,stitchBitmaps,return )

 ::flixel::FlxSprite GfxTool_obj::getSpriteFrame(::String img,int frame,int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_16237b24a89d6d61_174_getSpriteFrame)
HXLINE( 175)		 ::flixel::FlxSprite s =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE( 176)		s->loadGraphic(img,true,width,height,null(),null());
HXLINE( 177)		s->animation->set_frameIndex(frame);
HXLINE( 178)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GfxTool_obj,getSpriteFrame,return )

 ::openfl::display::BitmapData GfxTool_obj::replaceColor( ::openfl::display::BitmapData source,int color0,int color1,hx::Null< bool >  __o_cloneImage){
bool cloneImage = __o_cloneImage.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_16237b24a89d6d61_192_replaceColor)
HXLINE( 193)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,source->width,source->height);
HXLINE( 194)		 ::openfl::geom::Point point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 195)		 ::openfl::display::BitmapData dest;
HXDLIN( 195)		if (cloneImage) {
HXLINE( 195)			dest = source->clone();
            		}
            		else {
HXLINE( 195)			dest = source;
            		}
HXLINE( 196)		dest->threshold(dest,rect,point,HX_("==",60,35,00,00),color0,color1,null(),null());
HXLINE( 197)		return dest;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GfxTool_obj,replaceColor,return )

 ::flixel::graphics::FlxGraphic GfxTool_obj::getGraphicColorReplace( ::openfl::display::BitmapData b,::Array< int > source,::Array< int > dest){
            	HX_STACKFRAME(&_hx_pos_16237b24a89d6d61_211_getGraphicColorReplace)
HXLINE( 212)		::haxe::Log_obj::trace(HX_("Warning: I can improve this function by making it use bitmap not flxgraphic",89,0b,38,de),hx::SourceInfo(HX_("GfxTool.hx",0d,4a,25,68),212,HX_("djFlixel.gfx.GfxTool",70,69,c8,31),HX_("getGraphicColorReplace",e3,b0,a1,c9)));
HXLINE( 213)		 ::flixel::graphics::FlxGraphic gfx = ::flixel::FlxG_obj::bitmap->create(b->width,b->height,(int)0,true,null());
HXLINE( 225)		gfx->bitmap->lock();
HXLINE( 227)		int col;
HXLINE( 228)		int ind;
HXLINE( 230)		{
HXLINE( 230)			int _g1 = (int)0;
HXDLIN( 230)			int _g = b->height;
HXDLIN( 230)			while((_g1 < _g)){
HXLINE( 230)				_g1 = (_g1 + (int)1);
HXDLIN( 230)				int y = (_g1 - (int)1);
HXLINE( 231)				{
HXLINE( 231)					int _g3 = (int)0;
HXDLIN( 231)					int _g2 = b->width;
HXDLIN( 231)					while((_g3 < _g2)){
HXLINE( 231)						_g3 = (_g3 + (int)1);
HXDLIN( 231)						int x = (_g3 - (int)1);
HXLINE( 233)						col = b->getPixel32(x,y);
HXLINE( 234)						if ((col == (int)0)) {
HXLINE( 234)							continue;
            						}
HXLINE( 236)						ind = source->indexOf(col,null());
HXLINE( 237)						if ((ind >= (int)0)) {
HXLINE( 239)							 ::openfl::display::BitmapData gfx1 = gfx->bitmap;
HXDLIN( 239)							gfx1->setPixel32(x,y,dest->__get(ind));
            						}
            						else {
HXLINE( 242)							gfx->bitmap->setPixel32(x,y,col);
            						}
            					}
            				}
            			}
            		}
HXLINE( 246)		gfx->bitmap->unlock(null());
HXLINE( 248)		return gfx;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GfxTool_obj,getGraphicColorReplace,return )

int GfxTool_obj::extractRed(int c){
            	HX_STACKFRAME(&_hx_pos_16237b24a89d6d61_254_extractRed)
HXDLIN( 254)		return ((int)((int)c >> (int)(int)16) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GfxTool_obj,extractRed,return )

int GfxTool_obj::extractGreen(int c){
            	HX_STACKFRAME(&_hx_pos_16237b24a89d6d61_258_extractGreen)
HXDLIN( 258)		return ((int)((int)c >> (int)(int)8) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GfxTool_obj,extractGreen,return )

int GfxTool_obj::extractBlue(int c){
            	HX_STACKFRAME(&_hx_pos_16237b24a89d6d61_262_extractBlue)
HXDLIN( 262)		return ((int)c & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GfxTool_obj,extractBlue,return )

int GfxTool_obj::snapToLowerBitRepr(int a,hx::Null< int >  __o_div){
int div = __o_div.Default(64);
            	HX_STACKFRAME(&_hx_pos_16237b24a89d6d61_273_snapToLowerBitRepr)
HXDLIN( 273)		return (::Math_obj::floor(((Float)a / (Float)div)) * div);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GfxTool_obj,snapToLowerBitRepr,return )

 ::openfl::display::BitmapData GfxTool_obj::rainbowStripes(::Array< int > colors,hx::Null< int >  __o_width,hx::Null< int >  __o_height){
int width = __o_width.Default(20);
int height = __o_height.Default(100);
            	HX_GC_STACKFRAME(&_hx_pos_16237b24a89d6d61_289_rainbowStripes)
HXLINE( 290)		 ::openfl::display::BitmapData b =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,false,null());
HXLINE( 291)		int ch = ::Std_obj::_hx_int(((Float)height / (Float)colors->length));
HXLINE( 292)		 ::openfl::geom::Rectangle tr =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 293)		b->lock();
HXLINE( 294)		{
HXLINE( 294)			int _g1 = (int)0;
HXDLIN( 294)			int _g = colors->length;
HXDLIN( 294)			while((_g1 < _g)){
HXLINE( 294)				_g1 = (_g1 + (int)1);
HXDLIN( 294)				int i = (_g1 - (int)1);
HXLINE( 296)				tr->setTo((int)0,(i * ch),width,ch);
HXLINE( 297)				b->fillRect(tr,colors->__get(i));
            			}
            		}
HXLINE( 299)		b->unlock(null());
HXLINE( 300)		return b;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GfxTool_obj,rainbowStripes,return )

::String GfxTool_obj::PREFIX_PALETTE;

int GfxTool_obj::stringColor(::String s){
            	HX_STACKFRAME(&_hx_pos_16237b24a89d6d61_315_stringColor)
HXDLIN( 315)		if ((s.indexOf(HX_("@",40,00,00,00),null()) == (int)0)) {
HXLINE( 318)			return ::djFlixel::gfx::GfxTool_obj::palCol(s.substr((int)1,null()));
            		}
            		else {
HXLINE( 320)			return ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(s);
            		}
HXLINE( 315)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GfxTool_obj,stringColor,return )

int GfxTool_obj::palCol(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_16237b24a89d6d61_343_palCol)
HXLINE( 344)		 ::EReg exp =  ::EReg_obj::__alloc( HX_CTX ,HX_("(.+)\\[(\\d+)\\]",0c,2f,40,44),HX_("",00,00,00,00));
HXLINE( 345)		exp->match(str);
HXLINE( 346)		if (hx::IsNotNull( exp->matched((int)1) )) {
HXLINE( 347)			::String _g = exp->matched((int)1);
HXDLIN( 347)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("A16",66,7d,31,00)) ){
HXLINE( 348)				return ::djFlixel::gfx::Palette_Arne16_obj::COL->__get(::Std_obj::parseInt(exp->matched((int)2)));
HXDLIN( 348)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==HX_("AMS",e7,95,31,00)) ){
HXLINE( 351)				::Array< int > _hx_tmp = ::djFlixel::gfx::Palette_Amstrad_obj::COL;
HXDLIN( 351)				return _hx_tmp->__get(::Std_obj::parseInt(exp->matched((int)2)));
HXDLIN( 351)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==HX_("DB16",e3,c1,24,2d)) ){
HXLINE( 349)				::Array< int > _hx_tmp1 = ::djFlixel::gfx::Palette_DB16_obj::COL;
HXDLIN( 349)				return _hx_tmp1->__get(::Std_obj::parseInt(exp->matched((int)2)));
HXDLIN( 349)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==HX_("DB32",9d,c3,24,2d)) ){
HXLINE( 350)				::Array< int > _hx_tmp2 = ::djFlixel::gfx::Palette_DB32_obj::COL;
HXDLIN( 350)				return _hx_tmp2->__get(::Std_obj::parseInt(exp->matched((int)2)));
HXDLIN( 350)				goto _hx_goto_21;
            			}
            			/* default */{
HXLINE( 352)				 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 352)				_hx_tmp3(HX_("ERROR - Unsupported pallete code",5e,c0,54,e5), ::Dynamic(hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("className",a3,92,3d,dc),HX_("djFlixel.gfx.GfxTool",70,69,c8,31))
            					->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,exp->matched((int)1)))
            					->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("palCol",a5,f1,6c,e9))
            					->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("GfxTool.hx",0d,4a,25,68))
            					->setFixed(4,HX_("lineNumber",dd,81,22,76),(int)352)));
HXDLIN( 352)				return (int)0;
            			}
            			_hx_goto_21:;
            		}
HXLINE( 355)		::haxe::Log_obj::trace(HX_("ERROR - Error parsing Pallete String",7f,77,d0,71), ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("djFlixel.gfx.GfxTool",70,69,c8,31))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,str))
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("palCol",a5,f1,6c,e9))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("GfxTool.hx",0d,4a,25,68))
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),(int)355)));
HXDLIN( 355)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GfxTool_obj,palCol,return )


GfxTool_obj::GfxTool_obj()
{
}

bool GfxTool_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"palCol") ) { outValue = palCol_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"extractRed") ) { outValue = extractRed_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyShadow") ) { outValue = applyShadow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"extractBlue") ) { outValue = extractBlue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stringColor") ) { outValue = stringColor_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"drawBitmapOn") ) { outValue = drawBitmapOn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"replaceColor") ) { outValue = replaceColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"extractGreen") ) { outValue = extractGreen_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stitchBitmaps") ) { outValue = stitchBitmaps_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getSpriteFrame") ) { outValue = getSpriteFrame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rainbowStripes") ) { outValue = rainbowStripes_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getBitmapPortion") ) { outValue = getBitmapPortion_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"drawTilesToBitmap") ) { outValue = drawTilesToBitmap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resolveBitmapData") ) { outValue = resolveBitmapData_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"snapToLowerBitRepr") ) { outValue = snapToLowerBitRepr_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"getGraphicColorReplace") ) { outValue = getGraphicColorReplace_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GfxTool_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GfxTool_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &GfxTool_obj::PREFIX_PALETTE,HX_HCSTRING("PREFIX_PALETTE","\x6e","\x27","\x64","\xa1")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GfxTool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GfxTool_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GfxTool_obj::PREFIX_PALETTE,"PREFIX_PALETTE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GfxTool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GfxTool_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GfxTool_obj::PREFIX_PALETTE,"PREFIX_PALETTE");
};

#endif

hx::Class GfxTool_obj::__mClass;

static ::String GfxTool_obj_sStaticFields[] = {
	HX_HCSTRING("drawTilesToBitmap","\xcb","\xef","\xeb","\x96"),
	HX_HCSTRING("applyShadow","\xee","\x87","\x1b","\x59"),
	HX_HCSTRING("getBitmapPortion","\x42","\x1e","\x5a","\x9e"),
	HX_HCSTRING("resolveBitmapData","\xc5","\x2b","\x67","\xfa"),
	HX_HCSTRING("drawBitmapOn","\x12","\xfb","\x16","\x2e"),
	HX_HCSTRING("stitchBitmaps","\x33","\x5d","\xdb","\xb3"),
	HX_HCSTRING("getSpriteFrame","\xf2","\xac","\xc4","\xc4"),
	HX_HCSTRING("replaceColor","\x8f","\x5c","\xeb","\x3d"),
	HX_HCSTRING("getGraphicColorReplace","\xe3","\xb0","\xa1","\xc9"),
	HX_HCSTRING("extractRed","\x90","\xda","\x29","\x44"),
	HX_HCSTRING("extractGreen","\xc2","\x1d","\x72","\xb9"),
	HX_HCSTRING("extractBlue","\x7b","\x58","\xe7","\x55"),
	HX_HCSTRING("snapToLowerBitRepr","\xe6","\x1d","\xe9","\x7c"),
	HX_HCSTRING("rainbowStripes","\xb0","\x6a","\x1c","\xe6"),
	HX_HCSTRING("PREFIX_PALETTE","\x6e","\x27","\x64","\xa1"),
	HX_HCSTRING("stringColor","\xd2","\x22","\x5f","\x55"),
	HX_HCSTRING("palCol","\xa5","\xf1","\x6c","\xe9"),
	::String(null())
};

void GfxTool_obj::__register()
{
	hx::Object *dummy = new GfxTool_obj;
	GfxTool_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("djFlixel.gfx.GfxTool","\x70","\x69","\xc8","\x31");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GfxTool_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GfxTool_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GfxTool_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GfxTool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GfxTool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GfxTool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GfxTool_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GfxTool_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_16237b24a89d6d61_305_boot)
HXDLIN( 305)		PREFIX_PALETTE = HX_("@",40,00,00,00);
            	}
}

} // end namespace djFlixel
} // end namespace gfx
