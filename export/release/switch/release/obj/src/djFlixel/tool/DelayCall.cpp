// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_djFlixel_tool_DelayCall
#include <djFlixel/tool/DelayCall.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2ba977f01a285aed_29_new,"djFlixel.tool.DelayCall","new",0x279b05e9,"djFlixel.tool.DelayCall.new","djFlixel/tool/DelayCall.hx",29,0x53ba5607)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba977f01a285aed_41_update,"djFlixel.tool.DelayCall","update",0x48fbac20,"djFlixel.tool.DelayCall.update","djFlixel/tool/DelayCall.hx",41,0x53ba5607)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba977f01a285aed_53_destroy,"djFlixel.tool.DelayCall","destroy",0x19f15b03,"djFlixel.tool.DelayCall.destroy","djFlixel/tool/DelayCall.hx",53,0x53ba5607)
namespace djFlixel{
namespace tool{

void DelayCall_obj::__construct( ::Dynamic Callback,hx::Null< Float >  __o_time, ::flixel::FlxState state){
Float time = __o_time.Default(0);
            	HX_STACKFRAME(&_hx_pos_2ba977f01a285aed_29_new)
HXLINE(  30)		super::__construct();
HXLINE(  31)		this->callback = Callback;
HXLINE(  32)		this->countDown = time;
HXLINE(  33)		if (hx::IsNotNull( state )) {
HXLINE(  34)			state->add(hx::ObjectPtr<OBJ_>(this)).StaticCast<  ::flixel::FlxBasic >();
            		}
            		else {
HXLINE(  36)			::flixel::FlxG_obj::game->_state->add(hx::ObjectPtr<OBJ_>(this)).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}

Dynamic DelayCall_obj::__CreateEmpty() { return new DelayCall_obj; }

void *DelayCall_obj::_hx_vtable = 0;

Dynamic DelayCall_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DelayCall_obj > _hx_result = new DelayCall_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool DelayCall_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x104f1f07) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x104f1f07;
	} else {
		return inClassId==(int)0x25a685e0;
	}
}

void DelayCall_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_2ba977f01a285aed_41_update)
HXLINE(  42)		this->super::update(elapsed);
HXLINE(  43)		 ::djFlixel::tool::DelayCall _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  43)		_hx_tmp->countDown = (_hx_tmp->countDown - elapsed);
HXLINE(  44)		if ((this->countDown <= (int)0)) {
HXLINE(  45)			this->destroy();
HXLINE(  46)			if (hx::IsNotNull( this->callback )) {
HXLINE(  46)				this->callback();
            			}
            		}
            	}


void DelayCall_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_2ba977f01a285aed_53_destroy)
HXLINE(  54)		::flixel::FlxG_obj::game->_state->remove(hx::ObjectPtr<OBJ_>(this),null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  55)		this->super::destroy();
            	}



hx::ObjectPtr< DelayCall_obj > DelayCall_obj::__new( ::Dynamic Callback,hx::Null< Float >  __o_time, ::flixel::FlxState state) {
	hx::ObjectPtr< DelayCall_obj > __this = new DelayCall_obj();
	__this->__construct(Callback,__o_time,state);
	return __this;
}

hx::ObjectPtr< DelayCall_obj > DelayCall_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic Callback,hx::Null< Float >  __o_time, ::flixel::FlxState state) {
	DelayCall_obj *__this = (DelayCall_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DelayCall_obj), true, "djFlixel.tool.DelayCall"));
	*(void **)__this = DelayCall_obj::_hx_vtable;
	__this->__construct(Callback,__o_time,state);
	return __this;
}

DelayCall_obj::DelayCall_obj()
{
}

void DelayCall_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DelayCall);
	HX_MARK_MEMBER_NAME(countDown,"countDown");
	HX_MARK_MEMBER_NAME(callback,"callback");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DelayCall_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(countDown,"countDown");
	HX_VISIT_MEMBER_NAME(callback,"callback");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DelayCall_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return hx::Val( callback ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"countDown") ) { return hx::Val( countDown ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DelayCall_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"countDown") ) { countDown=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DelayCall_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("countDown","\xd1","\x7c","\x8e","\x54"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DelayCall_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(DelayCall_obj,countDown),HX_HCSTRING("countDown","\xd1","\x7c","\x8e","\x54")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DelayCall_obj,callback),HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DelayCall_obj_sStaticStorageInfo = 0;
#endif

static ::String DelayCall_obj_sMemberFields[] = {
	HX_HCSTRING("countDown","\xd1","\x7c","\x8e","\x54"),
	HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void DelayCall_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DelayCall_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DelayCall_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DelayCall_obj::__mClass,"__mClass");
};

#endif

hx::Class DelayCall_obj::__mClass;

void DelayCall_obj::__register()
{
	hx::Object *dummy = new DelayCall_obj;
	DelayCall_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("djFlixel.tool.DelayCall","\x77","\xdd","\x7d","\xf3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DelayCall_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DelayCall_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DelayCall_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DelayCall_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DelayCall_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DelayCall_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace djFlixel
} // end namespace tool
