// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_djFlixel_gfx_GfxTool
#include <djFlixel/gfx/GfxTool.h>
#endif
#ifndef INCLUDED_djFlixel_tool_DataTool
#include <djFlixel/tool/DataTool.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ed400f341928c913_21_create2DArray,"djFlixel.tool.DataTool","create2DArray",0x29a838a9,"djFlixel.tool.DataTool.create2DArray","djFlixel/tool/DataTool.hx",21,0x34653632)
HX_LOCAL_STACK_FRAME(_hx_pos_ed400f341928c913_38_applyToCSVParams,"djFlixel.tool.DataTool","applyToCSVParams",0xfcdfaae5,"djFlixel.tool.DataTool.applyToCSVParams","djFlixel/tool/DataTool.hx",38,0x34653632)
HX_LOCAL_STACK_FRAME(_hx_pos_ed400f341928c913_61_CSVGetQuick,"djFlixel.tool.DataTool","CSVGetQuick",0xd57e6c7b,"djFlixel.tool.DataTool.CSVGetQuick","djFlixel/tool/DataTool.hx",61,0x34653632)
HX_LOCAL_STACK_FRAME(_hx_pos_ed400f341928c913_81_arrayUnion,"djFlixel.tool.DataTool","arrayUnion",0xf2f06a38,"djFlixel.tool.DataTool.arrayUnion","djFlixel/tool/DataTool.hx",81,0x34653632)
HX_LOCAL_STACK_FRAME(_hx_pos_ed400f341928c913_95_arrayRandom,"djFlixel.tool.DataTool","arrayRandom",0xf36aa0ba,"djFlixel.tool.DataTool.arrayRandom","djFlixel/tool/DataTool.hx",95,0x34653632)
HX_LOCAL_STACK_FRAME(_hx_pos_ed400f341928c913_107_copyFields,"djFlixel.tool.DataTool","copyFields",0x882ee190,"djFlixel.tool.DataTool.copyFields","djFlixel/tool/DataTool.hx",107,0x34653632)
HX_LOCAL_STACK_FRAME(_hx_pos_ed400f341928c913_143_copyFieldsC,"djFlixel.tool.DataTool","copyFieldsC",0xa0d67cb3,"djFlixel.tool.DataTool.copyFieldsC","djFlixel/tool/DataTool.hx",143,0x34653632)
HX_LOCAL_STACK_FRAME(_hx_pos_ed400f341928c913_201_copyMFields,"djFlixel.tool.DataTool","copyMFields",0x0e6ef3cf,"djFlixel.tool.DataTool.copyMFields","djFlixel/tool/DataTool.hx",201,0x34653632)
HX_LOCAL_STACK_FRAME(_hx_pos_ed400f341928c913_225_padTrimString,"djFlixel.tool.DataTool","padTrimString",0x432e5a44,"djFlixel.tool.DataTool.padTrimString","djFlixel/tool/DataTool.hx",225,0x34653632)
HX_LOCAL_STACK_FRAME(_hx_pos_ed400f341928c913_243_roundFloat,"djFlixel.tool.DataTool","roundFloat",0xfd6d4ff0,"djFlixel.tool.DataTool.roundFloat","djFlixel/tool/DataTool.hx",243,0x34653632)
namespace djFlixel{
namespace tool{

void DataTool_obj::__construct() { }

Dynamic DataTool_obj::__CreateEmpty() { return new DataTool_obj; }

void *DataTool_obj::_hx_vtable = 0;

Dynamic DataTool_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DataTool_obj > _hx_result = new DataTool_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DataTool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b858c80;
}

::Array< ::Dynamic> DataTool_obj::create2DArray(int width,int height){
            	HX_STACKFRAME(&_hx_pos_ed400f341928c913_21_create2DArray)
HXDLIN(  21)		HX_STACK_DO_THROW(HX_("INCOMPATIBLE WITH CPP",70,53,6a,6a));
HXDLIN(  21)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DataTool_obj,create2DArray,return )

void DataTool_obj::applyToCSVParams(::String csv, ::Dynamic fn){
            	HX_STACKFRAME(&_hx_pos_ed400f341928c913_38_applyToCSVParams)
HXLINE(  39)		if (hx::IsNull( csv )) {
HXLINE(  39)			return;
            		}
HXLINE(  41)		::Array< ::String > pairs = csv.split(HX_(",",2c,00,00,00));
HXLINE(  42)		::Array< ::String > d;
HXLINE(  44)		{
HXLINE(  44)			int _g = (int)0;
HXDLIN(  44)			while((_g < pairs->length)){
HXLINE(  44)				::String p = pairs->__get(_g);
HXDLIN(  44)				_g = (_g + (int)1);
HXLINE(  45)				d = p.split(HX_(":",3a,00,00,00));
HXLINE(  46)				fn(d->__get((int)0),d->__get((int)1));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DataTool_obj,applyToCSVParams,(void))

::String DataTool_obj::CSVGetQuick(::String csv,::String field){
            	HX_STACKFRAME(&_hx_pos_ed400f341928c913_61_CSVGetQuick)
HXLINE(  62)		if (hx::IsNull( csv )) {
HXLINE(  62)			return null();
            		}
HXLINE(  63)		::Array< ::String > pairs = csv.split(HX_(",",2c,00,00,00));
HXLINE(  64)		::Array< ::String > d;
HXLINE(  65)		{
HXLINE(  65)			int _g = (int)0;
HXDLIN(  65)			while((_g < pairs->length)){
HXLINE(  65)				::String p = pairs->__get(_g);
HXDLIN(  65)				_g = (_g + (int)1);
HXLINE(  66)				d = p.split(HX_(":",3a,00,00,00));
HXLINE(  67)				if ((d->__get((int)0) == field)) {
HXLINE(  67)					return d->__get((int)1);
            				}
            			}
            		}
HXLINE(  69)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DataTool_obj,CSVGetQuick,return )

::cpp::VirtualArray DataTool_obj::arrayUnion(::cpp::VirtualArray ar1,::cpp::VirtualArray ar2){
            	HX_STACKFRAME(&_hx_pos_ed400f341928c913_81_arrayUnion)
HXLINE(  82)		::cpp::VirtualArray n = ar1->copy();
HXLINE(  83)		{
HXLINE(  83)			int _g = (int)0;
HXDLIN(  83)			while((_g < ar2->get_length())){
HXLINE(  83)				 ::Dynamic i = ar2->__get(_g);
HXDLIN(  83)				_g = (_g + (int)1);
HXLINE(  85)				if ((n->indexOf(i,null()) < (int)0)) {
HXLINE(  85)					n->push(i);
            				}
            			}
            		}
HXLINE(  87)		return n;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DataTool_obj,arrayUnion,return )

 ::Dynamic DataTool_obj::arrayRandom(::cpp::VirtualArray ar){
            	HX_STACKFRAME(&_hx_pos_ed400f341928c913_95_arrayRandom)
HXDLIN(  95)		return ar->__get(::Std_obj::random(ar->get_length()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DataTool_obj,arrayRandom,return )

 ::Dynamic DataTool_obj::copyFields( ::Dynamic from, ::Dynamic into){
            	HX_STACKFRAME(&_hx_pos_ed400f341928c913_107_copyFields)
HXLINE( 108)		if (hx::IsNull( from )) {
HXLINE( 111)			return into;
            		}
HXLINE( 114)		if (hx::IsNull( into )) {
HXLINE( 116)			::haxe::Log_obj::trace(HX_("Warning: No fields on the target, copying source object",26,71,44,bd),hx::SourceInfo(HX_("DataTool.hx",3c,71,75,90),116,HX_("djFlixel.tool.DataTool",ac,5f,c7,23),HX_("copyFields",0e,f4,52,36)));
HXLINE( 117)			into = ::Reflect_obj::copy(from);
            		}
            		else {
HXLINE( 120)			int _g = (int)0;
HXDLIN( 120)			::Array< ::String > _g1 = ::Reflect_obj::fields(from);
HXDLIN( 120)			while((_g < _g1->length)){
HXLINE( 120)				::String f = _g1->__get(_g);
HXDLIN( 120)				_g = (_g + (int)1);
HXLINE( 121)				::Reflect_obj::setField(into,f,::Reflect_obj::field(from,f));
            			}
            		}
HXLINE( 125)		return into;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DataTool_obj,copyFields,return )

 ::Dynamic DataTool_obj::copyFieldsC( ::Dynamic from, ::Dynamic into){
            	HX_STACKFRAME(&_hx_pos_ed400f341928c913_143_copyFieldsC)
HXLINE( 144)		if (hx::IsNull( into )) {
HXLINE( 144)			into =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE( 145)		if (hx::IsNotNull( from )) {
HXLINE( 147)			int _g = (int)0;
HXDLIN( 147)			::Array< ::String > _g1 = ::Reflect_obj::fields(from);
HXDLIN( 147)			while((_g < _g1->length)){
HXLINE( 147)				::String f = _g1->__get(_g);
HXDLIN( 147)				_g = (_g + (int)1);
HXLINE( 149)				 ::Dynamic d = ::Reflect_obj::field(from,f);
HXLINE( 155)				if ((f.indexOf(HX_("color",63,71,5c,4a),null()) == (int)0)) {
HXLINE( 157)					if (::Std_obj::is(d,hx::ArrayBase::__mClass)) {
HXLINE( 159)						::Array< int > ar = ::Array_obj< int >::__new(0);
HXLINE( 160)						::Array< ::String > arS = ( (::Array< ::String >)(d) );
HXLINE( 161)						int c = (int)0;
HXLINE( 162)						while((c < arS->length)){
HXLINE( 162)							c = (c + (int)1);
HXDLIN( 162)							ar->push(::djFlixel::gfx::GfxTool_obj::stringColor(arS->__get((c - (int)1))));
            						}
HXLINE( 163)						::Reflect_obj::setField(into,f,ar);
HXLINE( 164)						continue;
            					}
            					else {
HXLINE( 166)						if (::Std_obj::is(d,hx::ClassOf< ::String >())) {
HXLINE( 168)							::Reflect_obj::setField(into,f,::djFlixel::gfx::GfxTool_obj::stringColor(( (::String)(d) )));
HXLINE( 169)							continue;
            						}
            					}
            				}
HXLINE( 174)				bool _hx_tmp;
HXDLIN( 174)				bool _hx_tmp1;
HXDLIN( 174)				if (::Reflect_obj::isObject(d)) {
HXLINE( 174)					_hx_tmp1 = !(::Std_obj::is(d,hx::ArrayBase::__mClass));
            				}
            				else {
HXLINE( 174)					_hx_tmp1 = false;
            				}
HXDLIN( 174)				if (_hx_tmp1) {
HXLINE( 174)					_hx_tmp = !(::Std_obj::is(d,hx::ClassOf< ::String >()));
            				}
            				else {
HXLINE( 174)					_hx_tmp = false;
            				}
HXDLIN( 174)				if (_hx_tmp) {
HXLINE( 176)					if (!(::Reflect_obj::hasField(into,f))) {
HXLINE( 176)						::Reflect_obj::setField(into,f, ::Dynamic(hx::Anon_obj::Create(0)));
            					}
HXLINE( 177)					::djFlixel::tool::DataTool_obj::copyFieldsC(d,::Reflect_obj::field(into,f));
HXLINE( 178)					continue;
            				}
HXLINE( 182)				::Reflect_obj::setField(into,f,::Reflect_obj::field(from,f));
            			}
            		}
HXLINE( 185)		return into;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DataTool_obj,copyFieldsC,return )

 ::Dynamic DataTool_obj::copyMFields( ::Dynamic from, ::Dynamic into){
            	HX_STACKFRAME(&_hx_pos_ed400f341928c913_201_copyMFields)
HXLINE( 206)		if (hx::IsNull( into )) {
HXLINE( 206)			into =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
            		else {
HXLINE( 206)			into = ::Reflect_obj::copy(into);
            		}
HXLINE( 208)		{
HXLINE( 208)			int _g = (int)0;
HXDLIN( 208)			::Array< ::String > _g1 = ::Reflect_obj::fields(from);
HXDLIN( 208)			while((_g < _g1->length)){
HXLINE( 208)				::String f = _g1->__get(_g);
HXDLIN( 208)				_g = (_g + (int)1);
HXLINE( 209)				if (!(::Reflect_obj::hasField(into,f))) {
HXLINE( 210)					::Reflect_obj::setField(into,f,::Reflect_obj::field(from,f));
            				}
            			}
            		}
HXLINE( 213)		return into;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DataTool_obj,copyMFields,return )

::String DataTool_obj::padTrimString(::String str,int size,::String __o__hx_char,hx::Null< bool >  __o_leftPad){
::String _hx_char = __o__hx_char.Default(HX_HCSTRING(".","\x2e","\x00","\x00","\x00"));
bool leftPad = __o_leftPad.Default(true);
            	HX_STACKFRAME(&_hx_pos_ed400f341928c913_225_padTrimString)
HXDLIN( 225)		if ((str.length > size)) {
HXLINE( 227)			return (str.substr((int)0,(size - (int)2)) + HX_("..",40,28,00,00));
            		}
            		else {
HXLINE( 229)			if ((str.length < size)) {
HXLINE( 230)				if (leftPad) {
HXLINE( 231)					return ::StringTools_obj::lpad(str,_hx_char,size);
            				}
            				else {
HXLINE( 233)					return ::StringTools_obj::rpad(str,_hx_char,size);
            				}
            			}
            			else {
HXLINE( 236)				return str;
            			}
            		}
HXLINE( 225)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(DataTool_obj,padTrimString,return )

Float DataTool_obj::roundFloat(Float number, ::Dynamic __o_precision){
 ::Dynamic precision = __o_precision.Default(2);
            	HX_STACKFRAME(&_hx_pos_ed400f341928c913_243_roundFloat)
HXLINE( 244)		number = (number * ::Math_obj::pow((int)10,precision));
HXLINE( 245)		int _hx_tmp = ::Math_obj::round(number);
HXDLIN( 245)		return ((Float)_hx_tmp / (Float)::Math_obj::pow((int)10,precision));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DataTool_obj,roundFloat,return )


DataTool_obj::DataTool_obj()
{
}

bool DataTool_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"arrayUnion") ) { outValue = arrayUnion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyFields") ) { outValue = copyFields_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundFloat") ) { outValue = roundFloat_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"CSVGetQuick") ) { outValue = CSVGetQuick_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"arrayRandom") ) { outValue = arrayRandom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyFieldsC") ) { outValue = copyFieldsC_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyMFields") ) { outValue = copyMFields_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"create2DArray") ) { outValue = create2DArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"padTrimString") ) { outValue = padTrimString_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"applyToCSVParams") ) { outValue = applyToCSVParams_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DataTool_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *DataTool_obj_sStaticStorageInfo = 0;
#endif

static void DataTool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DataTool_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DataTool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DataTool_obj::__mClass,"__mClass");
};

#endif

hx::Class DataTool_obj::__mClass;

static ::String DataTool_obj_sStaticFields[] = {
	HX_HCSTRING("create2DArray","\xeb","\x48","\x24","\x23"),
	HX_HCSTRING("applyToCSVParams","\xe3","\xaf","\xed","\xd7"),
	HX_HCSTRING("CSVGetQuick","\x3d","\x88","\xea","\x86"),
	HX_HCSTRING("arrayUnion","\xb6","\x7c","\x14","\xa1"),
	HX_HCSTRING("arrayRandom","\x7c","\xbc","\xd6","\xa4"),
	HX_HCSTRING("copyFields","\x0e","\xf4","\x52","\x36"),
	HX_HCSTRING("copyFieldsC","\x75","\x98","\x42","\x52"),
	HX_HCSTRING("copyMFields","\x91","\x0f","\xdb","\xbf"),
	HX_HCSTRING("padTrimString","\x86","\x6a","\xaa","\x3c"),
	HX_HCSTRING("roundFloat","\x6e","\x62","\x91","\xab"),
	::String(null())
};

void DataTool_obj::__register()
{
	hx::Object *dummy = new DataTool_obj;
	DataTool_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("djFlixel.tool.DataTool","\xac","\x5f","\xc7","\x23");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DataTool_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DataTool_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DataTool_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< DataTool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DataTool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DataTool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DataTool_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace djFlixel
} // end namespace tool
