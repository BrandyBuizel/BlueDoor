// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_VCRFrontEnd
#include <flixel/system/frontEnds/VCRFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_replay_FlxReplay
#include <flixel/system/replay/FlxReplay.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9c3075758433de87_17_new,"flixel.system.frontEnds.VCRFrontEnd","new",0x9592d9ef,"flixel.system.frontEnds.VCRFrontEnd.new","flixel/system/frontEnds/VCRFrontEnd.hx",17,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_62_pause,"flixel.system.frontEnds.VCRFrontEnd","pause",0x6797a245,"flixel.system.frontEnds.VCRFrontEnd.pause","flixel/system/frontEnds/VCRFrontEnd.hx",62,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_82_resume,"flixel.system.frontEnds.VCRFrontEnd","resume",0x5616837e,"flixel.system.frontEnds.VCRFrontEnd.resume","flixel/system/frontEnds/VCRFrontEnd.hx",82,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_106_restartReplay,"flixel.system.frontEnds.VCRFrontEnd","restartReplay",0x86a89aa5,"flixel.system.frontEnds.VCRFrontEnd.restartReplay","flixel/system/frontEnds/VCRFrontEnd.hx",106,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_120_loadReplay,"flixel.system.frontEnds.VCRFrontEnd","loadReplay",0x957eec3e,"flixel.system.frontEnds.VCRFrontEnd.loadReplay","flixel/system/frontEnds/VCRFrontEnd.hx",120,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_157_reloadReplay,"flixel.system.frontEnds.VCRFrontEnd","reloadReplay",0x2d5d03f1,"flixel.system.frontEnds.VCRFrontEnd.reloadReplay","flixel/system/frontEnds/VCRFrontEnd.hx",157,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_177_stopReplay,"flixel.system.frontEnds.VCRFrontEnd","stopReplay",0x0a030f1a,"flixel.system.frontEnds.VCRFrontEnd.stopReplay","flixel/system/frontEnds/VCRFrontEnd.hx",177,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_196_cancelReplay,"flixel.system.frontEnds.VCRFrontEnd","cancelReplay",0x1e656cd2,"flixel.system.frontEnds.VCRFrontEnd.cancelReplay","flixel/system/frontEnds/VCRFrontEnd.hx",196,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_213_startRecording,"flixel.system.frontEnds.VCRFrontEnd","startRecording",0xf60de900,"flixel.system.frontEnds.VCRFrontEnd.startRecording","flixel/system/frontEnds/VCRFrontEnd.hx",213,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_239_stopRecording,"flixel.system.frontEnds.VCRFrontEnd","stopRecording",0xa7f958de,"flixel.system.frontEnds.VCRFrontEnd.stopRecording","flixel/system/frontEnds/VCRFrontEnd.hx",239,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_267_onOpen,"flixel.system.frontEnds.VCRFrontEnd","onOpen",0x39d0265a,"flixel.system.frontEnds.VCRFrontEnd.onOpen","flixel/system/frontEnds/VCRFrontEnd.hx",267,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_282_destroy,"flixel.system.frontEnds.VCRFrontEnd","destroy",0xb6caaa09,"flixel.system.frontEnds.VCRFrontEnd.destroy","flixel/system/frontEnds/VCRFrontEnd.hx",282,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_294_onOpenSelect,"flixel.system.frontEnds.VCRFrontEnd","onOpenSelect",0xe2c3f4f6,"flixel.system.frontEnds.VCRFrontEnd.onOpenSelect","flixel/system/frontEnds/VCRFrontEnd.hx",294,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_310_onOpenComplete,"flixel.system.frontEnds.VCRFrontEnd","onOpenComplete",0xe1becd33,"flixel.system.frontEnds.VCRFrontEnd.onOpenComplete","flixel/system/frontEnds/VCRFrontEnd.hx",310,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_337_onOpenCancel,"flixel.system.frontEnds.VCRFrontEnd","onOpenCancel",0x30c4c774,"flixel.system.frontEnds.VCRFrontEnd.onOpenCancel","flixel/system/frontEnds/VCRFrontEnd.hx",337,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_349_onOpenError,"flixel.system.frontEnds.VCRFrontEnd","onOpenError",0xc65bcf0e,"flixel.system.frontEnds.VCRFrontEnd.onOpenError","flixel/system/frontEnds/VCRFrontEnd.hx",349,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_362_onSaveComplete,"flixel.system.frontEnds.VCRFrontEnd","onSaveComplete",0xb6297fa6,"flixel.system.frontEnds.VCRFrontEnd.onSaveComplete","flixel/system/frontEnds/VCRFrontEnd.hx",362,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_376_onSaveCancel,"flixel.system.frontEnds.VCRFrontEnd","onSaveCancel",0x2be1e727,"flixel.system.frontEnds.VCRFrontEnd.onSaveCancel","flixel/system/frontEnds/VCRFrontEnd.hx",376,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_389_onSaveError,"flixel.system.frontEnds.VCRFrontEnd","onSaveError",0xe1e366bb,"flixel.system.frontEnds.VCRFrontEnd.onSaveError","flixel/system/frontEnds/VCRFrontEnd.hx",389,0xa1666a42)
namespace flixel{
namespace _hx_system{
namespace frontEnds{

void VCRFrontEnd_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_17_new)
HXLINE(  55)		this->stepRequested = false;
HXLINE(  50)		this->paused = false;
HXLINE(  40)		this->timeout = ((Float)0);
            	}

Dynamic VCRFrontEnd_obj::__CreateEmpty() { return new VCRFrontEnd_obj; }

void *VCRFrontEnd_obj::_hx_vtable = 0;

Dynamic VCRFrontEnd_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VCRFrontEnd_obj > _hx_result = new VCRFrontEnd_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VCRFrontEnd_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5d659b41;
}

void VCRFrontEnd_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_62_pause)
HXDLIN(  62)		if (!(this->paused)) {
HXLINE(  69)			this->paused = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,pause,(void))

void VCRFrontEnd_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_82_resume)
HXDLIN(  82)		if (this->paused) {
HXLINE(  89)			this->paused = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,resume,(void))

void VCRFrontEnd_obj::restartReplay(hx::Null< bool >  __o_StandardMode){
bool StandardMode = __o_StandardMode.Default(false);
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_106_restartReplay)
HXDLIN( 106)		::flixel::FlxG_obj::vcr->reloadReplay(StandardMode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,restartReplay,(void))

void VCRFrontEnd_obj::loadReplay(::String Data, ::flixel::FlxState State,::Array< int > CancelKeys, ::Dynamic __o_Timeout, ::Dynamic Callback){
 ::Dynamic Timeout = __o_Timeout.Default(0);
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_120_loadReplay)
HXLINE( 121)		::flixel::FlxG_obj::game->_replay->load(Data);
HXLINE( 123)		if (hx::IsNull( State )) {
HXLINE( 125)			::flixel::FlxG_obj::game->_resetGame = true;
            		}
            		else {
HXLINE( 129)			if (::flixel::FlxG_obj::game->_state->switchTo(State)) {
HXLINE( 129)				::flixel::FlxG_obj::game->_requestedState = State;
            			}
            		}
HXLINE( 132)		this->cancelKeys = CancelKeys;
HXLINE( 133)		this->timeout = ::Std_obj::_hx_int((Timeout * (int)1000));
HXLINE( 134)		this->replayCallback = Callback;
HXLINE( 135)		::flixel::FlxG_obj::game->_replayRequested = true;
HXLINE( 138)		::flixel::FlxG_obj::keys->enabled = false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(VCRFrontEnd_obj,loadReplay,(void))

void VCRFrontEnd_obj::reloadReplay(hx::Null< bool >  __o_StandardMode){
bool StandardMode = __o_StandardMode.Default(true);
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_157_reloadReplay)
HXLINE( 158)		if (StandardMode) {
HXLINE( 160)			::flixel::FlxG_obj::game->_resetGame = true;
            		}
            		else {
HXLINE( 164)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 164)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 164)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 167)		if ((::flixel::FlxG_obj::game->_replay->frameCount > (int)0)) {
HXLINE( 169)			::flixel::FlxG_obj::game->_replayRequested = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,reloadReplay,(void))

void VCRFrontEnd_obj::stopReplay(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_177_stopReplay)
HXLINE( 178)		::flixel::FlxG_obj::game->replaying = false;
HXLINE( 179)		::flixel::FlxG_obj::inputs->reset();
HXLINE( 186)		::flixel::FlxG_obj::keys->enabled = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,stopReplay,(void))

void VCRFrontEnd_obj::cancelReplay(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_196_cancelReplay)
HXDLIN( 196)		if (hx::IsNotNull( this->replayCallback )) {
HXLINE( 198)			this->replayCallback();
HXLINE( 199)			this->replayCallback = null();
            		}
            		else {
HXLINE( 203)			::flixel::FlxG_obj::game->replaying = false;
HXDLIN( 203)			::flixel::FlxG_obj::inputs->reset();
HXDLIN( 203)			::flixel::FlxG_obj::keys->enabled = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,cancelReplay,(void))

void VCRFrontEnd_obj::startRecording(hx::Null< bool >  __o_StandardMode){
bool StandardMode = __o_StandardMode.Default(true);
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_213_startRecording)
HXLINE( 214)		 ::flixel::math::FlxRandom _this = ::flixel::FlxG_obj::random;
HXDLIN( 214)		int NewSeed;
HXDLIN( 214)		if (StandardMode) {
HXLINE( 214)			NewSeed = ::flixel::FlxG_obj::random->initialSeed;
            		}
            		else {
HXLINE( 214)			NewSeed = ::flixel::math::FlxRandom_obj::_stateSeed;
            		}
HXDLIN( 214)		Float lowerBound;
HXDLIN( 214)		if ((NewSeed < (int)1)) {
HXLINE( 214)			lowerBound = (int)1;
            		}
            		else {
HXLINE( 214)			lowerBound = NewSeed;
            		}
HXDLIN( 214)		 ::Dynamic NewSeed1;
HXDLIN( 214)		if ((lowerBound > (int)2147483646)) {
HXLINE( 214)			NewSeed1 = (int)2147483646;
            		}
            		else {
HXLINE( 214)			NewSeed1 = lowerBound;
            		}
HXDLIN( 214)		int NewSeed2 = ::Std_obj::_hx_int(NewSeed1);
HXDLIN( 214)		Float lowerBound1;
HXDLIN( 214)		if ((NewSeed2 < (int)1)) {
HXLINE( 214)			lowerBound1 = (int)1;
            		}
            		else {
HXLINE( 214)			lowerBound1 = NewSeed2;
            		}
HXDLIN( 214)		 ::Dynamic _hx_tmp;
HXDLIN( 214)		if ((lowerBound1 > (int)2147483646)) {
HXLINE( 214)			_hx_tmp = (int)2147483646;
            		}
            		else {
HXLINE( 214)			_hx_tmp = lowerBound1;
            		}
HXDLIN( 214)		::flixel::math::FlxRandom_obj::_recordingSeed = (_this->initialSeed = ::Std_obj::_hx_int((_this->internalSeed = ::Std_obj::_hx_int(_hx_tmp))));
HXLINE( 216)		if (StandardMode) {
HXLINE( 218)			::flixel::FlxG_obj::game->_resetGame = true;
            		}
            		else {
HXLINE( 222)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 222)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 222)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 225)		::flixel::FlxG_obj::game->_recordingRequested = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,startRecording,(void))

::String VCRFrontEnd_obj::stopRecording(hx::Null< bool >  __o_OpenSaveDialog){
bool OpenSaveDialog = __o_OpenSaveDialog.Default(true);
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_239_stopRecording)
HXLINE( 240)		::flixel::FlxG_obj::game->recording = false;
HXLINE( 247)		::String data = ::flixel::FlxG_obj::game->_replay->save();
HXLINE( 249)		bool _hx_tmp;
HXDLIN( 249)		bool _hx_tmp1;
HXDLIN( 249)		if (OpenSaveDialog) {
HXLINE( 249)			_hx_tmp1 = hx::IsNotNull( data );
            		}
            		else {
HXLINE( 249)			_hx_tmp1 = false;
            		}
HXDLIN( 249)		if (_hx_tmp1) {
HXLINE( 249)			_hx_tmp = (data.length > (int)0);
            		}
            		else {
HXLINE( 249)			_hx_tmp = false;
            		}
HXLINE( 259)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,stopRecording,return )

void VCRFrontEnd_obj::onOpen(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_267_onOpen)
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,onOpen,(void))

void VCRFrontEnd_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_282_destroy)
HXDLIN( 282)		this->cancelKeys = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,destroy,(void))

void VCRFrontEnd_obj::onOpenSelect( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_294_onOpenSelect)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onOpenSelect,(void))

void VCRFrontEnd_obj::onOpenComplete( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_310_onOpenComplete)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onOpenComplete,(void))

void VCRFrontEnd_obj::onOpenCancel( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_337_onOpenCancel)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onOpenCancel,(void))

void VCRFrontEnd_obj::onOpenError( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_349_onOpenError)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onOpenError,(void))

void VCRFrontEnd_obj::onSaveComplete( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_362_onSaveComplete)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onSaveComplete,(void))

void VCRFrontEnd_obj::onSaveCancel( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_376_onSaveCancel)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onSaveCancel,(void))

void VCRFrontEnd_obj::onSaveError( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_389_onSaveError)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onSaveError,(void))


hx::ObjectPtr< VCRFrontEnd_obj > VCRFrontEnd_obj::__new() {
	hx::ObjectPtr< VCRFrontEnd_obj > __this = new VCRFrontEnd_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< VCRFrontEnd_obj > VCRFrontEnd_obj::__alloc(hx::Ctx *_hx_ctx) {
	VCRFrontEnd_obj *__this = (VCRFrontEnd_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VCRFrontEnd_obj), true, "flixel.system.frontEnds.VCRFrontEnd"));
	*(void **)__this = VCRFrontEnd_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VCRFrontEnd_obj::VCRFrontEnd_obj()
{
}

void VCRFrontEnd_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VCRFrontEnd);
	HX_MARK_MEMBER_NAME(replayCallback,"replayCallback");
	HX_MARK_MEMBER_NAME(cancelKeys,"cancelKeys");
	HX_MARK_MEMBER_NAME(timeout,"timeout");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(stepRequested,"stepRequested");
	HX_MARK_END_CLASS();
}

void VCRFrontEnd_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(replayCallback,"replayCallback");
	HX_VISIT_MEMBER_NAME(cancelKeys,"cancelKeys");
	HX_VISIT_MEMBER_NAME(timeout,"timeout");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(stepRequested,"stepRequested");
}

hx::Val VCRFrontEnd_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOpen") ) { return hx::Val( onOpen_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timeout") ) { return hx::Val( timeout ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cancelKeys") ) { return hx::Val( cancelKeys ); }
		if (HX_FIELD_EQ(inName,"loadReplay") ) { return hx::Val( loadReplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopReplay") ) { return hx::Val( stopReplay_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onOpenError") ) { return hx::Val( onOpenError_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"reloadReplay") ) { return hx::Val( reloadReplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"cancelReplay") ) { return hx::Val( cancelReplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOpenSelect") ) { return hx::Val( onOpenSelect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOpenCancel") ) { return hx::Val( onOpenCancel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stepRequested") ) { return hx::Val( stepRequested ); }
		if (HX_FIELD_EQ(inName,"restartReplay") ) { return hx::Val( restartReplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopRecording") ) { return hx::Val( stopRecording_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"replayCallback") ) { return hx::Val( replayCallback ); }
		if (HX_FIELD_EQ(inName,"startRecording") ) { return hx::Val( startRecording_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOpenComplete") ) { return hx::Val( onOpenComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return hx::Val( onSaveComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VCRFrontEnd_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timeout") ) { timeout=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cancelKeys") ) { cancelKeys=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stepRequested") ) { stepRequested=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"replayCallback") ) { replayCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VCRFrontEnd_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("cancelKeys","\x8e","\x40","\xf1","\xb5"));
	outFields->push(HX_HCSTRING("timeout","\xa1","\x1a","\xf7","\xd8"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("stepRequested","\x82","\x98","\x54","\xd1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VCRFrontEnd_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VCRFrontEnd_obj,replayCallback),HX_HCSTRING("replayCallback","\x0c","\x3c","\xc0","\x40")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(VCRFrontEnd_obj,cancelKeys),HX_HCSTRING("cancelKeys","\x8e","\x40","\xf1","\xb5")},
	{hx::fsFloat,(int)offsetof(VCRFrontEnd_obj,timeout),HX_HCSTRING("timeout","\xa1","\x1a","\xf7","\xd8")},
	{hx::fsBool,(int)offsetof(VCRFrontEnd_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsBool,(int)offsetof(VCRFrontEnd_obj,stepRequested),HX_HCSTRING("stepRequested","\x82","\x98","\x54","\xd1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VCRFrontEnd_obj_sStaticStorageInfo = 0;
#endif

static ::String VCRFrontEnd_obj_sMemberFields[] = {
	HX_HCSTRING("replayCallback","\x0c","\x3c","\xc0","\x40"),
	HX_HCSTRING("cancelKeys","\x8e","\x40","\xf1","\xb5"),
	HX_HCSTRING("timeout","\xa1","\x1a","\xf7","\xd8"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("stepRequested","\x82","\x98","\x54","\xd1"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("restartReplay","\x56","\x68","\xa6","\x7e"),
	HX_HCSTRING("loadReplay","\xed","\x15","\xad","\xbb"),
	HX_HCSTRING("reloadReplay","\x60","\x37","\xac","\xda"),
	HX_HCSTRING("stopReplay","\xc9","\x38","\x31","\x30"),
	HX_HCSTRING("cancelReplay","\x41","\xa0","\xb4","\xcb"),
	HX_HCSTRING("startRecording","\x2f","\x16","\x24","\xfc"),
	HX_HCSTRING("stopRecording","\x8f","\x26","\xf7","\x9f"),
	HX_HCSTRING("onOpen","\x89","\x0c","\x3e","\xec"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("onOpenSelect","\x65","\x28","\x13","\x90"),
	HX_HCSTRING("onOpenComplete","\x62","\xfa","\xd4","\xe7"),
	HX_HCSTRING("onOpenCancel","\xe3","\xfa","\x13","\xde"),
	HX_HCSTRING("onOpenError","\x7f","\x1e","\x92","\x08"),
	HX_HCSTRING("onSaveComplete","\xd5","\xac","\x3f","\xbc"),
	HX_HCSTRING("onSaveCancel","\x96","\x1a","\x31","\xd9"),
	HX_HCSTRING("onSaveError","\x2c","\xb6","\x19","\x24"),
	::String(null()) };

static void VCRFrontEnd_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VCRFrontEnd_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VCRFrontEnd_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VCRFrontEnd_obj::__mClass,"__mClass");
};

#endif

hx::Class VCRFrontEnd_obj::__mClass;

void VCRFrontEnd_obj::__register()
{
	hx::Object *dummy = new VCRFrontEnd_obj;
	VCRFrontEnd_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.frontEnds.VCRFrontEnd","\x7d","\xb6","\xad","\xb5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VCRFrontEnd_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VCRFrontEnd_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VCRFrontEnd_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VCRFrontEnd_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VCRFrontEnd_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VCRFrontEnd_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds
