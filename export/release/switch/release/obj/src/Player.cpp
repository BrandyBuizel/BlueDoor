// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_9_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",9,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_22_playerMovement,"Player","playerMovement",0x888ee3fd,"Player.playerMovement","Player.hx",22,0xa27fc9dd)

void Player_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_9_new)
HXLINE(  11)		this->playerLane = (int)1;
HXLINE(  15)		super::__construct(X,Y,null());
HXLINE(  16)		this->loadGraphic(HX_("assets/images/spr_player.png",11,14,ef,82),true,(int)16,(int)16,null(),null());
HXLINE(  17)		this->updateHitbox();
HXLINE(  18)		 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6c4d5f81;
	}
}

void Player_obj::playerMovement(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_22_playerMovement)
HXLINE(  23)		{
HXLINE(  23)			int _g = this->playerLane;
HXDLIN(  23)			switch((int)(_g)){
            				case (int)1: {
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            				case (int)3: {
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE(  34)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN(  34)		int KeyArray;
HXDLIN(  34)		::String s = HX_("UP",5b,4a,00,00);
HXDLIN(  34)		s = s.toUpperCase();
HXDLIN(  34)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE(  34)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE(  34)			KeyArray = (int)-1;
            		}
HXDLIN(  34)		int KeyArray1;
HXDLIN(  34)		::String s1 = HX_("DOWN",62,c0,2e,2d);
HXDLIN(  34)		s1 = s1.toUpperCase();
HXDLIN(  34)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE(  34)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXLINE(  34)			KeyArray1 = (int)-1;
            		}
HXDLIN(  34)		int KeyArray2;
HXDLIN(  34)		::String s2 = HX_("LEFT",07,d0,70,32);
HXDLIN(  34)		s2 = s2.toUpperCase();
HXDLIN(  34)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE(  34)			KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            		}
            		else {
HXLINE(  34)			KeyArray2 = (int)-1;
            		}
HXDLIN(  34)		::String s3 = HX_("RIGHT",bc,43,52,67);
HXDLIN(  34)		s3 = s3.toUpperCase();
HXDLIN(  34)		int KeyArray3;
HXDLIN(  34)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) {
HXLINE(  34)			KeyArray3 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) );
            		}
            		else {
HXLINE(  34)			KeyArray3 = (int)-1;
            		}
HXDLIN(  34)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(8)->init(0,(int)87)->init(1,(int)65)->init(2,(int)83)->init(3,(int)68)->init(4,KeyArray)->init(5,KeyArray1)->init(6,KeyArray2)->init(7,KeyArray3),(int)1)) {
HXLINE(  36)			 ::flixel::input::keyboard::FlxKeyboard _this1 = ::flixel::FlxG_obj::keys;
HXDLIN(  36)			int KeyArray4;
HXDLIN(  36)			::String s4 = HX_("S",53,00,00,00);
HXDLIN(  36)			s4 = s4.toUpperCase();
HXDLIN(  36)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s4)) {
HXLINE(  36)				KeyArray4 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s4)) );
            			}
            			else {
HXLINE(  36)				KeyArray4 = (int)-1;
            			}
HXDLIN(  36)			::String s5 = HX_("DOWN",62,c0,2e,2d);
HXDLIN(  36)			s5 = s5.toUpperCase();
HXDLIN(  36)			int KeyArray5;
HXDLIN(  36)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s5)) {
HXLINE(  36)				KeyArray5 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s5)) );
            			}
            			else {
HXLINE(  36)				KeyArray5 = (int)-1;
            			}
HXDLIN(  36)			bool _hx_tmp = _this1->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray4)->init(1,KeyArray5),(int)1);
HXLINE(  40)			 ::flixel::input::keyboard::FlxKeyboard _this2 = ::flixel::FlxG_obj::keys;
HXDLIN(  40)			int KeyArray6;
HXDLIN(  40)			::String s6 = HX_("W",57,00,00,00);
HXDLIN(  40)			s6 = s6.toUpperCase();
HXDLIN(  40)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s6)) {
HXLINE(  40)				KeyArray6 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s6)) );
            			}
            			else {
HXLINE(  40)				KeyArray6 = (int)-1;
            			}
HXDLIN(  40)			::String s7 = HX_("UP",5b,4a,00,00);
HXDLIN(  40)			s7 = s7.toUpperCase();
HXDLIN(  40)			int KeyArray7;
HXDLIN(  40)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s7)) {
HXLINE(  40)				KeyArray7 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s7)) );
            			}
            			else {
HXLINE(  40)				KeyArray7 = (int)-1;
            			}
HXDLIN(  40)			bool _hx_tmp1 = _this2->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray6)->init(1,KeyArray7),(int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,playerMovement,(void))


hx::ObjectPtr< Player_obj > Player_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

Player_obj::Player_obj()
{
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"playerLane") ) { return hx::Val( playerLane ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"playerMovement") ) { return hx::Val( playerMovement_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"playerLane") ) { playerLane=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("playerLane","\xed","\xe1","\x6e","\xaa"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Player_obj,playerLane),HX_HCSTRING("playerLane","\xed","\xe1","\x6e","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("playerLane","\xed","\xe1","\x6e","\xaa"),
	HX_HCSTRING("playerMovement","\xb0","\xf5","\x7d","\x12"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

